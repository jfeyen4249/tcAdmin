<!DOCTYPE html>
<html lang="en">
<head>
    <style>
        /* You may adjust these values as needed */
        .w-85 {
            width: 35%;
        }

        .h-70 {
            height: 30%;
        }
        #modal {
            align-items: center;
            justify-content: center;
        }

        .modal-btn {
            position: absolute;
            left: 50%;
            transform: translate(45%);
        }

        .ql-editor {
            min-height: 96px;
            max-height: 150px;
            overflow-y: auto;
        }

        .ql-editor {
            margin-bottom: 10px;
        }

    </style>

    <link rel="apple-touch-icon" sizes="180x180" href="../fav/apple-touch-icon.png">
    <link rel="icon" type="image/png" sizes="32x32" href="../fav/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="../fav/favicon-16x16.png">
    <link rel="manifest" href="../fav/site.webmanifest">
    <link rel="mask-icon" href="../fav/safari-pinned-tab.svg" color="#5bbad5">
    <meta name="msapplication-TileColor" content="#da532c">
    <meta name="theme-color" content="#ffffff">

    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <link href="https://cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet">
    <script defer src=".././menu.js"></script>
    <script src="https://cdn.tailwindcss.com"></script>
    <title>Student Directory</title>
    <link rel="icon" type="image/png" sizes="32x32" href="../fav/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="../fav/favicon-16x16.png">

    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/alertifyjs/build/css/alertify.min.css"/>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/alertifyjs/build/css/themes/default.min.css"/>
    <script src="https://cdn.jsdelivr.net/npm/alertifyjs/build/alertify.min.js"></script>

        {{!-- <script defer src=".././dymo.js"></script> --}}
    <script defer src=".././menu.js"></script>
    <script defer src=".././label.js"></script> 

    <script src="https://qajavascriptsdktests.azurewebsites.net/JavaScript/dymo.connect.framework.js"></script>
    <script>

        function showAlertSuccess(text) {
            alertify.set('notifier','delay', 6);
            alertify.set('notifier','position', 'top-center');
            alertify.success(text);
        }
        function showalertwarning(text) {
            alertify.set('notifier','delay', 6);
            alertify.set('notifier','position', 'top-center');
            alertify.error(text);
        }
    </script>
</head>
<body class="bg-slate-800 h-screen flex">

    <!-- Left Side Menu -->
    <div class="w-1/6 bg-slate-950 text-white p-4 text-center">
        <img src="../img/tc-logo.png" style="width: 90%; height: auto; margin-bottom: 20px; padding: 1rem;">
        <ul id="menu">
            
        </ul>
    </div>

    <!-- Main Content -->
    <div class="flex-1 p-8">
    <div class="max-w-full w-full bg-white p-8 rounded shadow-md">
        <div class="flex items-center justify-between mb-4">
            <h1 class="text-2xl font-bold mb-4">Student Directory</h1>
            <div class="flex items-center">
                <input type="text" id="search" placeholder="Search..." class="bg-gray-100 border border-gray-300 px-4 py-2 rounded-l-md focus:outline-none focus:ring-blue-500 focus:border-blue-500">
                <button class="bg-blue-500 text-white px-4 py-2 rounded-md ml-4"  onclick="openModal(0)"><i class="fa-solid fa-plus"></i> Add</button>
                <input type="file" name="" id="upload" hidden>
                <button class="bg-green-500 text-white px-4 py-2 rounded-md ml-4" id="import">Import</button>
            </div>
        </div>
        
        <!-- Scrollable Table Container -->
        <div class="relative h-[72vh] overflow-y-auto">
            
            <table class="w-full border-collapse border border-gray-800 mx-auto">
                <thead>
                    <tr class="bg-gray-800 text-white">
                        <th class="py-2 px-4 border">Name</th>
                        <th class="py-2 px-4 border">Graduation Year</th>
                    </tr>
                </thead>
                <tbody class="text-center" id="student-table">
                    <!-- Table rows -->
                </tbody>
            </table>
        </div>
        
        <div class="w-full text-right mt-4" id="pageBTN">
            <button id="prevButton" data-page="0" class="bg-gray-800 text-white py-2 px-4 rounded hover:bg-gray-700">Previous</button>
            <span id="pageIndicator">Page 1</span>
            <button id="nextButton" data-page="2" class="bg-gray-800 text-white py-2 px-4 rounded hover:bg-gray-700">Next</button>

        </div>

    </div>
</div>


 
    <!-- Modal -->
    <div id="modal" class="fixed top-0 left-0 w-full h-full flex items-center justify-center bg-gray-800 bg-opacity-50 hidden" onclick="event.stopPropagation()">
    <div class="relative w-85 h-70 bg-white rounded shadow-md flex flex-col">
        <div class="grid grid-cols-1 flex-grow">
            <div class="col-span-1 bg-white p-8 rounded-l">
               
                    <!-- Website/Service -->
                    <div class="mb-4">
                        <label for="student-name" class="block text-gray-600 text-sm font-medium mb-2">Student Name</label>
                        <input type="text" id="student-name" name="student-name" class="w-full px-3 py-2 border rounded-md focus:outline-none focus:border-blue-500" > 
                    </div>
                   
                    <div class="mb-4">
                        <label for="grad-year" class="block text-gray-600 text-sm font-medium mb-2">Graduation Year</label>
                        <input type="text" id="grad-year" name="grad-year" class="w-full px-3 py-2 border rounded-md focus:outline-none focus:border-blue-500" >
                    </div>

                 
                    
                <button type="button" id="add" class="w-full bg-green-500 text-white p-2 rounded-md hover:bg-green-700 mb-4 mt-2 hidden" onclick="addStudent()">Add Student</button>
                <button type="button" id="print" class="w-full bg-green-500 text-white p-2 rounded-md hover:bg-green-700 mb-4 mt-2 hidden" onclick="printStudentLabel(document.getElementById('student-name').value, document.getElementById('grad-year').value);">Print Label</button>
                <button type="button" id="edit" class="w-full bg-green-500 text-white p-2 rounded-md hover:bg-green-700 mb-4 mt-2 hidden" onclick="editStudent()">Update Student</button>
                <button type="button" id="delete" class="w-full bg-red-500 text-white p-2 rounded-md hover:bg-red-700 mb-4 mt-2 hidden" onclick="deleteStudent()">Delete Student</button>
                 
            </div>
        </div>
        <button class="absolute top-4 right-4 text-gray-600" onclick="closeModal()">
            <i class="fas fa-times"></i>
        </button>
    </div>
</div>

    <script defer>
        const dateString = new Date().toDateString();
        let editid = 0;
        let studentName = document.getElementById('student-name')
        let gradYear = document.getElementById('grad-year')
        let modal = document.getElementById('modal')
        let addBTN = document.getElementById('add')
        let printBTN = document.getElementById('print')
        let editBTN = document.getElementById('edit')
        let deleteBTN = document.getElementById('delete')
        let importBTN = document.getElementById('import')
        let upload = document.getElementById('upload')
        
        function openModal(id) {
            if(id === 0) {
                modal.classList.remove('hidden')
                addBTN.classList.remove('hidden')
            } else {
                editid = id
                modal.classList.remove('hidden')
                editBTN.classList.remove('hidden')
                printBTN.classList.remove('hidden');
                deleteBTN.classList.remove('hidden')
                fetch(`/students/student?id=${editid}`)
                .then(response => response.json())
                .then(data => {
                    let obj = data[0]
                    studentName.value = obj.student
                    gradYear.value = obj.year
                });
            }
            studentName.focus()
        }

        function closeModal() {
            if(editid === 0) {
                modal.classList.add('hidden')
                addBTN.classList.add('hidden')
            } else {
                modal.classList.add('hidden')
                editBTN.classList.add('hidden')
                deleteBTN.classList.add('hidden')
                
            }
            studentName.value = ''
            gradYear.value = ''
            editid = 0
        }

        const limit = 30; // Number of items per page
        let currentPage = 1;
        let allStudents = [];
        let filteredStudents = [];
        let isFilteringSearch = false;
        let maxPages = 1;

        populateStudentList();

        async function populateStudentList() {
            if(isFilteringSearch) return;
            allStudents = await loadStudents();
            populateStudentTable(1, allStudents);
        }

        function populateStudentTable(page, table) {
            const pageToPopulate = page || 1;
            const positionToStartInArray = (pageToPopulate * limit) - limit;
            const positionToEndInArray = (pageToPopulate * limit) - 1;
            maxPages = Math.ceil(table.length / limit);

            if(currentPage > maxPages) return;
            if(maxPages === 1) document.getElementById('pageBTN').style.display = 'none';

            document.getElementById('student-table').innerHTML = '';
            for(let i = positionToStartInArray; i <= positionToEndInArray; i++) {
                try {
                    let obj = table[i];
                    let row = `<tr class="hover:bg-blue-400" onclick="openModal('${obj.id}')">
                                   <td class="py-2 px-4 border">${obj.student}</td>
                                   <td class="py-2 px-4 border">${obj.year}</td>
                                </tr>`;
                    document.getElementById('student-table').innerHTML += row;
                } catch(err) {

                }
            }
            currentPage = pageToPopulate;
            document.getElementById('pageIndicator').innerText = `Page ${pageToPopulate}`;
        }

        async function loadStudents() {
            let allStudentsFromFetch = []
            document.getElementById('student-table').innerHTML = '';
           await fetch('/students/listAll/')
                    .then(response => response.json())
                    .then(data => {
                        allStudentsFromFetch = data;
                    });
            return allStudentsFromFetch;
        }

        function isInSearch(search, student) {
            let studentString = JSON.stringify(student).toLocaleLowerCase();
            if(student.id.toString().includes(search)) return false; //I hate this but fuck it, it works.
            return studentString.includes(search.toLocaleLowerCase());
        }

        function filterStudentsBySearch(search) {
            filteredStudents = allStudents.filter((student) => isInSearch(search, student))
        }

        function addStudent() {
            if(studentName.value.length === 0) {
                showalertwarning('Enter the students full name')
                return
            }
        
            if(gradYear.value.length === 0) {
                showalertwarning('Enter the students graduation year')
                return
            }

            let data = {
                    student: studentName.value,
                    year: gradYear.value,
                }
                
                fetch(`/students/student`, {
                method: 'Put',
                body : JSON.stringify(data),
                headers: {"Content-Type": "application/json",}
                })
                .then(response => response.text())
                .then(data => {
                    if(data === 'added') {
                       closeModal();
                       populateStudentList();
                    }
                });
        }

        function editStudent() {
            if(studentName.value.length === 0) {
                showalertwarning('Enter the students full name')
                return
            }
        
            if(gradYear.value.length === 0) {
                showalertwarning('Enter the students graduation year')
                return
            }

            let data = {
                    student: studentName.value,
                    year: gradYear.value,
                }
                
                fetch(`/students/student?id=${editid}`, {
                method: 'Post',
                body : JSON.stringify(data),
                headers: {"Content-Type": "application/json",}
                })
                .then(response => response.text())
                .then(data => {
                    if(data === 'added') {
                       closeModal()
                        populateStudentList();
                    }
                });
        }

        function deleteStudent() {
            let answer = prompt(`Do you want to delete ${studentName.value}? (yes/no)`);
            if (answer === "yes") {
                fetch(`/students/student?id=${editid}`, {method : 'delete'})
                .then(response => response.text())
                .then(data => {
                    if(data === 'deleted') {
                        closeModal()
                        populateStudentList();
                    }
                });
            } else if (answer === "no") {
                populateStudentList();
            } 
        }

        document.getElementById('prevButton').addEventListener('click', () => {
            if (currentPage > 1) {
                if(isFilteringSearch) {
                    populateStudentTable(currentPage - 1, filteredStudents);
                } else {
                    populateStudentTable(currentPage - 1, allStudents);
                }
            }
        });

        document.getElementById('nextButton').addEventListener('click', () => {
            if(currentPage < maxPages) {
                if (isFilteringSearch) {
                    populateStudentTable(currentPage + 1, filteredStudents);
                } else {
                    populateStudentTable(currentPage + 1, allStudents);
                }
            }
        });

        document.getElementById('search').addEventListener('input', () => {

            const searchString = document.getElementById('search').value;
            currentPage = 1;

            if(searchString.length === 0) {
                document.getElementById('student-table').innerHTML = ''
                document.getElementById('pageBTN').style.display = 'block'

                if(isFilteringSearch) {
                    isFilteringSearch = false;
                }

                populateStudentList();
            } else if(document.getElementById('search').value.length >= 1) {
                document.getElementById('pageBTN').style.display = 'block'
                document.getElementById('student-table').innerHTML = '';
                isFilteringSearch = true;
                filterStudentsBySearch(searchString);
                populateStudentTable(currentPage, filteredStudents);
            }
        });

        document.getElementById('upload').addEventListener('change', function(event) {
            const file = event.target.files[0];
            const reader = new FileReader();

            reader.onload = function(e) {
                const lines = e.target.result.split('\n');
                lines.forEach(function(line) {
                    let data = {
                        student : line.split(',')[0] + " " + line.split(',')[1],
                        year : line.split(',')[2].slice(0, 4)
                    }
                    fetch(`/students/student/`,{
                        method: 'Put',
                        body : JSON.stringify(data),
                        headers: {
                            "Content-Type": "application/json"
                        },
                    })
                        .then(response => response.text())
                        .then(data => {
                            console.log(data)
                        });
                });
            }
            reader.readAsText(file);
        });

        importBTN.addEventListener('click', function() {
            upload.click()
        })

    
    </script>

</body>
</html>
