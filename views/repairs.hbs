<!DOCTYPE html>
<html lang="en">
<head>
    <style>
        /* You may adjust these values as needed */
        .w-85 {
            width: 75%;
        }

        .h-70 {
            height: 75%;
        }
        #modal {
            align-items: center;
            justify-content: center;
        }

        .modal-btn {
            position: absolute;
            left: 50%;
            transform: translate(45%);
        }

        .ql-editor {
            min-height: 96px;
            max-height: 150px;
            overflow-y: auto;
        }

        .ql-editor {
            margin-bottom: 10px;
        }

        .modal-width {
            max-width: 30vw;
            width: 30vw;
        }

    </style>

    <link rel="apple-touch-icon" sizes="180x180" href="../fav/apple-touch-icon.png">
    <link rel="icon" type="image/png" sizes="32x32" href="../fav/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="../fav/favicon-16x16.png">
    <link rel="manifest" href="../fav/site.webmanifest">
    <link rel="mask-icon" href="../fav/safari-pinned-tab.svg" color="#5bbad5">
    <meta name="msapplication-TileColor" content="#da532c">
    <meta name="theme-color" content="#ffffff">

    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <link href="https://cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet">
    <script defer src=".././menu.js"></script>
    <script src="https://cdn.tailwindcss.com"></script>
    <title>TC Admin: Chromebook Inventory</title>
    <link rel="icon" type="image/png" sizes="32x32" href="../fav/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="../fav/favicon-16x16.png">
</head>
<body class="bg-slate-800 h-screen flex">

    <!-- Left Side Menu -->
    <div class="w-1/6 bg-slate-950 text-white p-4 text-center">
        <img src="../img/tc-logo.png" style="width: 90%; height: auto; margin-bottom: 20px; padding: 1rem;">
        <ul id="menu">
            
        </ul>
    </div>

    <!-- Main Content -->
    <div class="flex-1 p-8">
       <div class="max-w-full w-full bg-white p-8 rounded shadow-md">
    <div class="flex items-center justify-between mb-4">
        <!-- Password Manager Passwords text -->
        <h1 class="text-2xl font-bold mb-4">Chromebook Inventory</h1>

        <!-- Search Box and Add New Password Button Container -->
        <div class="flex items-center">
            <!-- Search Box -->
            <div class="flex items-center">
                <input type="text" id="search" placeholder="Search..." class="bg-gray-100 border border-gray-300 px-4 py-2 rounded-l-md focus:outline-none focus:ring-blue-500 focus:border-blue-500">
            </div>
            
            <!-- Add New Password Button -->
            <button class="bg-blue-500 text-white px-4 py-2 rounded-md ml-4" onclick="AddModal()"><i class="fa-solid fa-plus"></i> Add</button>
        </div>
    </div>

    <!-- Table -->
    <div class="relative h-[80vh] overflow-y-auto">

    <table class="w-full border-collapse border border-gray-800">
        <thead>
            <tr class="bg-gray-800 text-white">
                <th class="py-2 px-4 border">Make</th>
                <th class="py-2 px-4 border">Model</th>
                <th class="py-2 px-4 border">Screen Size</th>
                <th class="py-2 px-4 border">Serial Number</th>
                <th class="py-2 px-4 border">Tag</th>
                <th class="py-2 px-4 border">Cost</th>
                <th class="py-2 px-4 border">Updates</th>
                <th class="py-2 px-4 border">Building</th>
                <th class="py-2 px-4 border">Device Status</th>
            </tr>
        </thead>
        <tbody class="text-center" id="password-table">
           
        </tbody>
    </table>
</div>
</div>

 

    <!-- Modal -->
     <div id="add-modal" class="fixed top-0 left-0 w-full h-full bg-gray-800 bg-opacity-50 hidden" onclick="event.stopPropagation()">
        <div class="wpc modal-width mx-auto mt-20 bg-white p-8 rounded shadow-md">
            <h2 class="text-2xl font-bold mb-4 text-center">Add New Chromebook</h2>
            <form>
                <!-- Documentation Title -->
                           
               <div class="mb-4">
                        <label for="modal-model" class="block text-gray-600 text-sm font-medium mb-2">Make & Model</label>
                        <select name="modal-model" id="modal-model-add" class="w-full px-3 py-2 border rounded-md focus:outline-none focus:border-blue-500"></select>
                    </div>

                <div class="mb-4">
                    <label for="modal-sn" class="block text-gray-600 text-sm font-medium mb-2">Serial Number</label>
                    <input type="text" id="modal-sn-add" name="modal-sn" class="w-full px-3 py-2 border rounded-md focus:outline-none focus:border-blue-500" required>
                </div>

                <div class="mb-4">
                    <label for="modal-tag" class="block text-gray-600 text-sm font-medium mb-2">Asset Tag</label>
                    <input type="text" id="modal-tag-add" name="modal-tag" class="w-full px-3 py-2 border rounded-md focus:outline-none focus:border-blue-500" required>
                </div>

                <div class="mb-4">
                    <label for="modal-tag" class="block text-gray-600 text-sm font-medium mb-2">Date Added</label>
                    <input type="date" id="modal-date-add" name="modal-tag" class="w-full px-3 py-2 border rounded-md focus:outline-none focus:border-blue-500" required>
                </div>


                <div class="mb-4 mt-3">
                        <label for="modal-building" class="block text-gray-600 text-sm font-medium mb-2">Building Locations</label>
                        <select name="modal-building" id="modal-building-add" class="w-full px-3 py-2 border rounded-md focus:outline-none focus:border-blue-500"></select>
                    </div>
                <!-- Save Button -->
               <div class="grid grid-flow-col justify-stretch">
                <button type="button" onclick="addChromebook()" id="add-btn" class="w-half bg-green-500 text-white p-1 mr-3 rounded-md hover:bg-blue-600">Add Chromebook</button>
                <button type="button" onclick="editChromebook()" id="edit-btn" class="w-half bg-green-500 text-white p-1 mr-3 rounded-md hover:bg-blue-600 hidden">Update</button>
                <button type="button" onclick="deleteChromebook()" id="del-btn" class="w-half bg-red-500 text-white p-1 mr-3 rounded-md hover:bg-red-600 hidden">Delete</button>
                <button type="button" onclick="AddModalClose()" class="w-half bg-blue-500 text-white p-2 rounded-md hover:bg-blue-600">Close</button>
           
               </div>
        </div>
    </div>



    
    <script defer>
        let addModal = document.getElementById('add-modal')
        let addmake = document.getElementById('modal-model-add')
        let addSN = document.getElementById('modal-sn-add')
        let addtag = document.getElementById('modal-tag-add')
        let addBuilding = document.getElementById('modal-building-add')
        let addRoom = document.getElementById('modal-room-add')
        let addDate = document.getElementById('modal-date-add')
        let addBtn = document.getElementById('add-btn')
        let editBtn = document.getElementById('edit-btn')
        let delBtn = document.getElementById('del-btn')

        let editID = 0
        let searchBox = document.getElementById('search')
       
        function getChromebook() {
            document.getElementById('password-table').innerHTML = ''
            fetch(`/chromebook/list`)
            .then(response => response.json())
            .then(data => {
                data.forEach(obj => {
                    function buildingColor(building) {
                        if(building == 'DAC') {
                            return 'bg-green-400'
                        }

                        if(building == 'NS') {
                            return 'bg-yellow-400'
                        }

                        if(building == 'PS') {
                            return 'bg-red-400'
                        }

                        if(building == 'ABE') {
                            return 'bg-lime-400'
                        }

                        if(building == 'MHS') {
                            return 'bg-blue-400'
                        }

                        if(building == 'MMS') {
                            return 'bg-orange-400'
                        }
                        
                        if(building == 'N/A') {
                            return 'bg-gray-400'
                        }
                    }
                    let row = `
                        <tr class="hover:bg-blue-400 ${buildingColor(obj.building)}" onclick="EditModal('${obj.id}')">
                        <td class="py-2 px-4 border">${obj.make}</td>
                        <td class="py-2 px-4 border">${obj.model}</td>
                        <td class="py-2 px-4 border">${obj.screen} inch</td>
                        <td class="py-2 px-4 border">${obj.sn}</td>
                        <td class="py-2 px-4 border">${obj.tag}</td>
                        <td class="py-2 px-4 border">$${obj.cost}</td>
                        <td class="py-2 px-4 border">${obj.updates}</td>
                        <td class="py-2 px-4 border">${obj.building}</td>
                        <td class="py-2 px-4 border">${obj.device_status}</td>
                         </tr>`;
                    document.getElementById('password-table').innerHTML += row;
                });
        })

        }

        function AddModal() {
            addModal.classList.remove('hidden')
            addDate.value = formattedDate
            addBuilding.selectedIndex = 0
            addmake.selectedIndex = 0
        }

        function EditModal(id) {
            addModal.classList.remove('hidden')
            editID = id
            addBtn.classList.add('hidden')
            editBtn.classList.remove('hidden')
            delBtn.classList.remove('hidden')
             fetch(`/chromebook/chromebook?id=${editID}`)
            .then(response => response.json())
            .then(data => {
                    //console.log(data)
                    let obj = data[0]
                    addSN.value = obj.sn
                    addtag.value = obj.tag
                    addDate.value = obj.formattedDate

                    var selectModel = addmake; 
                    for (var i = 0; i < selectModel.options.length; i++) {
                        var option = selectModel.options[i];
                        if (option.value === obj.model_id) {
                            option.selected = true;
                            break;
                        }   
                    }

                    var selectModel = addBuilding; 
                    for (var i = 0; i < selectModel.options.length; i++) {
                        var option = selectModel.options[i];
                        if (option.value === obj.building) {
                            option.selected = true;
                            break;
                        }   
                    }
                });  
        }

        function AddModalClose() {
            if(editBtn == 0) {
                addModal.classList.add('hidden')
                addtag.value = ''
                addSN.value = ''
            }else {
                addModal.classList.add('hidden')
                addBtn.classList.remove('hidden')
                editBtn.classList.add('hidden')
                delBtn.classList.add('hidden')
                addtag.value = ''
                addSN.value = ''
                editID = 0
            }
        }

        function getBuildings() {
                    addBuilding.innerHTML = ``
                    addBuilding.innerHTML += `<option value="" >Select A Building</option>`
                    
                    fetch('/ap/buildings')
                    .then(response => response.json())
                    .then(data => {
                        //console.log(data)
                            for(let i = 0; i<data.length; i++) {
                                let obj = data[i]
                                addBuilding.innerHTML += `<option value="${obj.name}">${obj.name}</option>`
                                
                            }
                        });     
                }

        function getMakeModel() {
                    addmake.innerHTML = ``
                    addmake.innerHTML += `<option value="" >Select Chromebook Make & Model</option>`
                    
                    fetch(`/chromebook/makes`)
                    .then(response => response.json())
                    .then(data => {
                        //console.log(data)
                            for(let i = 0; i<data.length; i++) {
                                let obj = data[i]
                                addmake.innerHTML += `<option value="${obj.id}">${obj.make} ${obj.model}</option>`
                            }
                        });     
            }
        
        function addChromebook() {
            if(addmake.value == '') {
                alert('Select a Make & Model')
                return
            }
            if(addSN.value == '') {
                alert('Enter a Serial Number')
                return
            }
            if(addBuilding.value == '') {
                alert('Select a building')
                return
            }



             let data = {
                    model_id: addmake.value,
                    sn: addSN.value,
                    tag: addtag.value,
                    building: addBuilding.value,
                    date_added: formattedDate,
                    status: 'true',
                    device_status : 'In Use'
                }
                
                fetch(`/chromebook/chromebook`, {
                method: 'Put',
                body : JSON.stringify(data),
                headers: {"Content-Type": "application/json",}
                })
                .then(response => response.text())
                .then(data => {
                    if(data == 'added') {
                        addSN.value = ''
                        addtag.value = ''
                        addModal.classList.add('hidden')
                        //showNotification('Computer was updated!', 'bg-orange-700')
                        AddModalClose()
                        getChromebook()
                    }
                });
        }

        function editChromebook() {
            if(addmake.value == '') {
                alert('Select a Make & Model')
                return
            }
            if(addSN.value == '') {
                alert('Enter a Serial Number')
                return
            }
            if(addBuilding.value == '') {
                alert('Select a building')
                return
            }

             let data = {
                    model_id: addmake.value,
                    sn: addSN.value,
                    tag: addtag.value,
                    building: addBuilding.value,
                    date_added: formattedDate,
                    status: 'true',
                    device_status : 'In Use'
                }
                
                fetch(`/chromebook/chromebook?id=${editID}`, {
                method: 'Post',
                body : JSON.stringify(data),
                headers: {"Content-Type": "application/json",}
                })
                .then(response => response.text())
                .then(data => {
                    if(data == 'updated') {
                        addSN.value = ''
                        addtag.value = ''
                        addModal.classList.add('hidden')
                        //showNotification('Computer was updated!', 'bg-orange-700')
                        AddModalClose()
                        getChromebook()
                    }
                });
        }
        
        function deleteChromebook() {
            var answer = prompt(`Do you want to delete this Chromebook? (yes/no)`);
            if (answer === "yes") {
                fetch(`/chromebook/chromebook?id=${editID}`, {method : 'delete'})
                .then(response => response.text())
                .then(data => {
                    if(data == 'deleted') {
                        alert(`This chromebook was deleted`)
                        AddModalClose()
                        getChromebook()
                    }
                });
            } else if (answer === "no") {
                getChromebook()
            } else {
                 getChromebook()
            }
        }

        searchBox.addEventListener("input", () => {
             document.getElementById('password-table').innerHTML = ''
            if(searchBox.length = 0) {
                getChromebook()
            } else {
                
            fetch(`/chromebook/search?search=${searchBox.value}`)
            .then(response => response.json())
            .then(data => {
               
                for(let i = 0; i<data.length; i++) {
                    let obj =data[i];

                    function buildingColor(building) {
                        if(building == 'DAC') {
                            return 'bg-green-400'
                        }

                        if(building == 'NS') {
                            return 'bg-yellow-400'
                        }

                        if(building == 'PS') {
                            return 'bg-red-400'
                        }

                        if(building == 'ABE') {
                            return 'bg-lime-400'
                        }

                        if(building == 'MHS') {
                            return 'bg-blue-400'
                        }

                        if(building == 'MMS') {
                            return 'bg-orange-400'
                        }
                    }
                    
                    let row = `
                        <tr class="hover:bg-blue-400 ${buildingColor(obj.building)}" onclick="EditModal('${obj.id}')">
                        <td class="py-2 px-4 border">${obj.make}</td>
                        <td class="py-2 px-4 border">${obj.model}</td>
                        <td class="py-2 px-4 border">${obj.screen} inch</td>
                        <td class="py-2 px-4 border">${obj.sn}</td>
                        <td class="py-2 px-4 border">${obj.tag}</td>
                        <td class="py-2 px-4 border">$${obj.cost}</td>
                        <td class="py-2 px-4 border">${obj.updates}</td>
                        <td class="py-2 px-4 border">${obj.building}</td>
                        <td class="py-2 px-4 border">${obj.device_status}</td>
                        
                        
                         </tr>`;
                    document.getElementById('password-table').innerHTML += row;
                



                }
            })
            }
        })

        getMakeModel()
        getBuildings()
        getChromebook()
       
    </script>

</body>
</html>
