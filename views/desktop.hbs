<!DOCTYPE html>
<html lang="en">
<head>
   <style>
     .wpc {
        width: 30vw;
    }
   </style>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <script src="https://cdn.tailwindcss.com"></script>
     <script defer src=".././menu.js"></script>
    <title>Desktop Inventory</title>
    <link rel="icon" type="image/png" sizes="32x32" href="../fav/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="../fav/favicon-16x16.png">

    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/alertifyjs/build/css/alertify.min.css"/>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/alertifyjs/build/css/themes/default.min.css"/>
    <script src="https://cdn.jsdelivr.net/npm/alertifyjs/build/alertify.min.js"></script>
    <script>

        function showAlertSuccess(text) {
            alertify.set('notifier','delay', 6);
            alertify.set('notifier','position', 'top-center');
            alertify.success(text);
        }
        function showalertwarning(text) {
            alertify.set('notifier','delay', 6);
            alertify.set('notifier','position', 'top-center');
            alertify.error(text);
        }
    </script>
</head>
    
    <div id="notification" class="bg-gray-800 text-white p-4 mr-12 mt-36 rounded-md shadow-md fixed min-w-64 right-0 top-0 hidden animate-slide-in-right">
        <span id="noteText"></span>
    </div>

<body class="bg-slate-800 h-screen flex">

    <!-- Left Side Menu -->
    <div class="w-1/6 bg-slate-950 text-white p-4 text-center">
        <img src="../img/tc-logo.png" style="width: 90%; height: auto; margin-bottom: 20px; padding: 1rem;">
        <ul id="menu">
            
        </ul>
    </div>

    <!-- Main Content -->
    <div class="flex-1 p-8">
       <div class="max-w-full w-full bg-white p-8 rounded shadow-md">
    <div class="flex items-center justify-between mb-4">
        <!-- Password Manager Passwords text -->
        <h1 class="text-2xl font-bold mb-4">Desktop Inventory</h1>

        <!-- Search Box and Add New Password Button Container -->
        <div class="flex items-center">
            <!-- Search Box -->
            <div class="flex items-center">
                <input type="text" id="search" placeholder="Search..." class="bg-gray-100 border border-gray-300 px-4 py-2 rounded-l-md focus:outline-none focus:ring-blue-500 focus:border-blue-500">
            </div>
            
            <!-- Add New Password Button -->
            <button class="bg-blue-500 text-white px-4 py-2 rounded-md ml-4" onclick="document.getElementById('add-modal').classList.remove('hidden')"><i class="fa-solid fa-plus"></i> Add</button>
            <button class="bg-amber-500 text-white px-4 py-2 rounded-md ml-4" onclick="dlTools()"><i class="fa-solid fa-floppy-disk"></i> Download</button>
        </div>
    </div>

    <!-- Table -->
    <div class="relative h-[72vh] overflow-y-auto">
        <table class="w-full border-collapse border border-gray-800" >
            
            <div class="grid grid-cols-3 gap-2 mt-3 w-full text-center" id="grid">
                    
                </div>
        </table>
    </div>
        
         <div class="w-full text-right mt-4" id="pageBTN">
            <button id="prevButton" data-page="0" class="bg-gray-800 text-white py-2 px-4 rounded hover:bg-gray-700">Previous</button>
            <span id="pageIndicator">Page 1</span>
            <button id="nextButton" data-page="2" class="bg-gray-800 text-white py-2 px-4 rounded hover:bg-gray-700">Next</button>

        </div>
    </div>

    <!-- Modal -->
    <div id="add-modal" class="fixed top-0 left-0 w-full h-full bg-gray-800 bg-opacity-50 hidden" onclick="event.stopPropagation()">
        <div class="wpc mx-auto mt-20 bg-white p-8 rounded shadow-md">
            <h2 class="text-2xl font-bold mb-4 text-center">Add New Computer</h2>
            <form>
                <!-- Documentation Title -->
                {{!-- <div class="mb-4">
                    <label for="modal-title" class="block text-gray-600 text-sm font-medium mb-2">Mac Address</label>
                    <input type="text" id="modal-mac-add" name="modal-title" placeholder="Enter as 1a:2b:3c:4d:5e:6f:aa:11" class="w-full px-3 py-2 border rounded-md focus:outline-none focus:border-blue-500" required>
                </div> --}}

                <div class="mb-4">
                        <label for="modal-make" class="block text-gray-600 text-sm font-medium mb-2">PC Make</label>
                        <select name="modal-make" id="modal-make-add" class="w-full px-3 py-2 border rounded-md focus:outline-none focus:border-blue-500">
                        </select>
                </div>
               
               <div class="mb-4">
                        <label for="modal-model" class="block text-gray-600 text-sm font-medium mb-2">PC Model</label>
                        <select name="modal-model" id="modal-model-add" class="w-full px-3 py-2 border rounded-md focus:outline-none focus:border-blue-500"></select>
                    </div>

                <div class="mb-4">
                    <label for="modal-sn" class="block text-gray-600 text-sm font-medium mb-2">Serial Number</label>
                    <input type="text" id="modal-sn-add" name="modal-sn" class="w-full px-3 py-2 border rounded-md focus:outline-none focus:border-blue-500" required>
                </div>

                <div class="mb-4">
                    <label for="modal-tag" class="block text-gray-600 text-sm font-medium mb-2">Asset Tag</label>
                    <input type="text" id="modal-tag-add" name="modal-tag" class="w-full px-3 py-2 border rounded-md focus:outline-none focus:border-blue-500" required>
                </div>

                <div class="mb-4 mt-3">
                        <label for="modal-building" class="block text-gray-600 text-sm font-medium mb-2">Building Locations</label>
                        <select name="modal-building" id="modal-building-add" class="w-full px-3 py-2 border rounded-md focus:outline-none focus:border-blue-500"></select>
                    </div>

                    <div class="mb-4 mt-3">
                        <label for="modal-room" class="block text-gray-600 text-sm font-medium mb-2">Room Number</label>
                        <select name="modal-room" id="modal-room-add" class="w-full px-3 py-2 border rounded-md focus:outline-none focus:border-blue-500"></select>
                         
                    </div>
                <!-- Save Button -->
                <button type="button" onclick="addDesktop()" class="w-half bg-green-500 text-white p-2 rounded-md hover:bg-blue-600">Add Computer</button>
                <button type="button" onclick="document.getElementById('add-modal').classList.add('hidden')" class="w-half bg-red-500 text-white p-2 rounded-md hover:bg-red-600">Close</button>
            </form>
        </div>

    </div>

    <!-- Modal -->
    <div id="edit-modal" class="fixed top-0 left-0 w-full h-full bg-gray-800 bg-opacity-50 hidden" onclick="event.stopPropagation()">
        <div class="wpc mx-auto mt-2 bg-white p-8 rounded shadow-md">
            <h2 class="text-2xl font-bold mb-4 text-center">Edit Computer</h2>
            <form>
                <!-- Documentation Title -->
                {{!-- <div class="mb-4">
                    <label for="modal-title" class="block text-gray-600 text-sm font-medium mb-2">Mac Address</label>
                    <input type="text" id="modal-mac-edit" name="modal-title" placeholder="Enter as 1a:2b:3c:4d:5e:6f:aa:11" class="w-full px-3 py-2 border rounded-md focus:outline-none focus:border-blue-500" required>
                </div> --}}

                <div class="mb-4">
                        <label for="modal-make" class="block text-gray-600 text-sm font-medium mb-2">PC Make</label>
                        <select name="modal-make" id="modal-make-edit" class="w-full px-3 py-2 border rounded-md focus:outline-none focus:border-blue-500">
                        </select>
                </div>
               
               <div class="mb-4">
                        <label for="modal-model" class="block text-gray-600 text-sm font-medium mb-2">PC Model</label>
                        <select name="modal-model" id="modal-model-edit" class="w-full px-3 py-2 border rounded-md focus:outline-none focus:border-blue-500"></select>
                    </div>

                <div class="mb-4">
                    <label for="modal-sn" class="block text-gray-600 text-sm font-medium mb-2">Serial Number</label>
                    <input type="text" id="modal-sn-edit" name="modal-sn" class="w-full px-3 py-2 border rounded-md focus:outline-none focus:border-blue-500" required>
                </div>

                <div class="mb-4">
                    <label for="modal-tag" class="block text-gray-600 text-sm font-medium mb-2">Asset Tag</label>
                    <input type="text" id="modal-tag-edit" name="modal-tag" class="w-full px-3 py-2 border rounded-md focus:outline-none focus:border-blue-500" required>
                </div>

                <div class="mb-4 mt-3">
                        <label for="modal-building" class="block text-gray-600 text-sm font-medium mb-2">Building Locations</label>
                        <select name="modal-building" id="modal-building-edit" class="w-full px-3 py-2 border rounded-md focus:outline-none focus:border-blue-500" ></select>
                    </div>

                    <div class="mb-4 mt-3">
                        <label for="modal-room" class="block text-gray-600 text-sm font-medium mb-2">Room Number</label>
                        <select name="modal-room" id="modal-room-edit" class="w-full px-3 py-2 border rounded-md focus:outline-none focus:border-blue-500"></select>
                         
                    </div>
                <!-- Save Button -->
                <button type="button" onclick="editDesktop()" class="w-half bg-green-500 text-white p-2 rounded-md hover:bg-blue-600">Save Computer</button>
                <button type="button" onclick="document.getElementById('edit-modal').classList.add('hidden')" class="w-half bg-red-500 text-white p-2 rounded-md hover:bg-red-600">Close</button>
            </form>
        </div>
    </div>


    <script defer>
        let grid = document.getElementById('grid')
        let addModal = document.getElementById('add-modal')
        let addmake = document.getElementById('modal-make-add')
        let addmodel = document.getElementById('modal-model-add')
        let addSN = document.getElementById('modal-sn-add')
        let addtag = document.getElementById('modal-tag-add')
        //let addmac = document.getElementById('modal-mac-add')
        let addBuilding = document.getElementById('modal-building-add')
        let addRoom = document.getElementById('modal-room-add')
        let editID = 0
        let editModal = document.getElementById('edit-modal')
        let editmake = document.getElementById('modal-make-edit')
        let editmodel = document.getElementById('modal-model-edit')
        let editSN = document.getElementById('modal-sn-edit')
        let edittag = document.getElementById('modal-tag-edit')
        // let editmac = document.getElementById('modal-mac-edit')
        let editBuilding = document.getElementById('modal-building-edit')
        let editRoom = document.getElementById('modal-room-edit')

        let searchBox = document.getElementById('search')
        addmake.addEventListener("input", function() {getAddModel()})
        addBuilding.addEventListener("input", function() {getRoom()})

        editBuilding.addEventListener("change", function() {getEditRoom()})



        function isValidMACAddress(macAddress) {
            var macRegex = /^([0-9A-Fa-f]{2}[:-]){7}[0-9A-Fa-f]{2}$/;
            return macRegex.test(macAddress);
        }

        function getEditPc(id) {
            editID = id
            fetch(`/desktop/computer?id=${id}`)
                .then(response => response.json())
                .then(data => {
                    console.log(data)
                    let obj = data[0]
                    editSN.value = obj.sn
                    edittag.value = obj.tag

                    var selectElement = editmake; 
                    for (var i = 0; i < selectElement.options.length; i++) {
                        var option = selectElement.options[i];
                        if (option.value === obj.make) {
                            option.selected = true;
                            getEditModel(obj.model)
                            break;
                        }   
                    }

                    var selectElement = editBuilding; 
                    for (var i = 0; i < selectElement.options.length; i++) {
                        var option = selectElement.options[i];
                        if (option.value === obj.building) {
                            option.selected = true;
                            console.log('Selected')
                            getEditRoom(obj.room)
                            console.log('EditRoom Called')
                            break;
                        }   
                    }
                    

                });
            editModal.classList.remove('hidden')
        }

        let currentPage = 1;
        const limit = 30; // Number of items per page
        function getDesktop(page = 1) {
            localStorage.clear()
            grid.innerHTML = ''
            fetch(`/desktop/list?page=${page}&limit=${limit}`)
            .then(response => response.json())
            .then(data => {
                grid.innerHTML = ''
                for(let i = 0; i<data.length; i++) {
                    let obj =data[i];

                    let hddFree = obj.hdd.split('/')[1]
                    let hddTotal = obj.hdd.split('/')[0]
                    
                    let ramFree = obj.ram.split('/')[1]
                    let ramTotal = obj.ram.split('/')[0]

                    grid.innerHTML += `
                        <div class="${localStorage.getItem(obj.building)} p-4 rounded-md text-left grid grid-cols-3 gap-x-4">
                            <h2 class="col-span-3 text-lg font-semibold mb-2 text-center" id="name">${obj.name}</h2>
                            <p class="font-semibold text-right col-span-1">Make:</p>
                            <p class="col-span-2">${obj.make}</p>
                            <p class="font-semibold text-right col-span-1">Model:</p>
                            <p class="col-span-2">${obj.model}</p>
                            <p class="font-semibold text-right col-span-1">SN:</p>
                            <p class="col-span-2"id >${obj.sn}</p>
                            <p class="font-semibold text-right col-span-1">IP:</p>
                            <p class="col-span-2">${obj.ip}</p>
                            <p class="font-semibold text-right col-span-1">Ram:</p>
                            <p class="col-span-2">${ramFree} GB used of ${ramTotal} GB</p>
                            <p class="font-semibold text-right col-span-1">HDD:</p>
                            <p class="col-span-2">${hddFree} GB free of ${hddTotal} GB</p>
                            <p class="font-semibold text-right col-span-1">OS:</p>
                            <p class="col-span-2">${obj.os}</p>
                                    <button type="button" onclick="getEditPc('${obj.id}')" class="w-half bg-green-500 text-white p-2 rounded-md outline outline-offset-2 outline-white hover:bg-green-800 mt-6 col-span-2">Edit</button>
                                    <button type="button" onclick="deleteDesktop('${obj.id}', '${obj.name}')" class="w-half bg-red-500 text-white p-2 rounded-md outline outline-offset-2 outline-white rounded-md hover:bg-red-900 mt-6 col-span-1">Delete</button>
                        </div>`
                }
            })
            currentPage = page;
            document.getElementById('pageIndicator').innerText = `Page ${currentPage}`;
        }


        document.getElementById('prevButton').addEventListener('click', () => {
            if (currentPage > 1) getDesktop(currentPage - 1);
        });

        document.getElementById('nextButton').addEventListener('click', () => {
            getDesktop(currentPage + 1); // You might want to check here if there are still more data
        });
        
        function getAddMake() {
            document.getElementById('modal-make-add').innerHTML = 
            document.getElementById('modal-make-add').innerHTML = '<option value="">Select a Make</option>'
            editmake.innerHTML = '<option value="">Select a Make</option>'
            fetch(`/desktop/make/`)
                .then(response => response.json())
                .then(data => {
                    for(let i=0; i<data.length; i++) {
                    let obj = data[i];
                        document.getElementById('modal-make-add').innerHTML += `<option value="${obj.make}">${obj.make}</option>`;
                        editmake.innerHTML += `<option value="${obj.make}">${obj.make}</option>`;
                    }
                });
        }

         function getAddModel() {
            fetch(`/desktop/model?make=${addmake.value}`)
                .then(response => response.json())
                .then(data => {
                    addmodel.innerHTML = '<option value="">Select a Model</option>'
                    editmodel.innerHTML = '<option value="">Select a Model</option>'
                    for(let i=0; i<data.length; i++) {
                    let obj = data[i];
                        addmodel.innerHTML += `<option value="${obj.model}">${obj.model}</option>`;
                    }
                });
        }

         function getEditModel(model) {
            fetch(`/desktop/model?make=${editmake.value}`)
                .then(response => response.json())
                .then(data => {
                    editmodel.innerHTML = '<option value="">Select a Model</option>'
                    for(let i=0; i<data.length; i++) {
                    let obj = data[i];
                        editmodel.innerHTML += `<option value="${obj.model}">${obj.model}</option>`;
                    }

                    var selectModel = editmodel; 
                            for (var i = 0; i < selectModel.options.length; i++) {
                                console.log(selectModel.value)
                                var option = selectModel.options[i];
                                if (option.value === model) {
                                    console.log("Running")
                                    option.selected = true;
                                    break;
                                }   
                            }

                });
        }
        
         function getBuildings() {
                    addBuilding.innerHTML = ``
                    addBuilding.innerHTML += `<option value="" >Select A Building</option>`
                    editBuilding.innerHTML += `<option value="" >Select A Building</option>`
                    fetch('/ap/buildings')
                    .then(response => response.json())
                    .then(data => {
                        //console.log(data)
                            for(let i = 0; i<data.length; i++) {
                                let obj = data[i]
                                addBuilding.innerHTML += `<option value="${obj.name}">${obj.name}</option>`
                                editBuilding.innerHTML += `<option value="${obj.name}">${obj.name}</option>`
                                localStorage.setItem(obj.name, obj.color)
                            }
                        });     
                }

        function getRoom() {
                    addRoom.innerHTML = ``
                    addRoom.innerHTML += `<option value="" >Select A Room</option>`
                    
                    fetch(`/ap/room?building=${addBuilding.value}`)
                    .then(response => response.json())
                    .then(data => {
                        //console.log(data)
                            for(let i = 0; i<data.length; i++) {
                                let obj = data[i]
                                addRoom.innerHTML += `<option value="${obj.room}">${obj.room}</option>`
                            }
                        });     
            }
        
        function getEditRoom(room) {
                    editRoom.innerHTML = ``
                    editRoom.innerHTML += `<option value="" >Select A Room</option>`
                    
                    fetch(`/ap/room?building=${editBuilding.value}`)
                    .then(response => response.json())
                    .then(data => {
                        //console.log(data)
                            for(let i = 0; i<data.length; i++) {
                                let obj = data[i]
                                editRoom.innerHTML += `<option value="${obj.room}">${obj.room}</option>`
                            }

                            var selectRoom = editRoom; 
                            for (var i = 0; i < selectRoom.options.length; i++) {
                                console.log(selectRoom.value)
                                var option = selectRoom.options[i];
                                if (option.value === room) {
                                    console.log("Running")
                                    option.selected = true;
                                    break;
                                }   
                            }
                        });     
            }

        function addDesktop() {                
                if(addmake.value == '') {
                    showAlertWarning('Select a model!')
                    return
                }

                if(addmodel.value == '') {
                    showAlertWarning('Select a model!')
                    return
                }

                if(addSN.value == "") {
                    showAlertWarning('Enter a Serial Number!')
                    return
                }

                if(addtag.value == '') {
                    showAlertWarning('Enter an asset tag!')
                    return
                }

                let data = {
                    make: addmake.value,
                    model: addmodel.value,
                    sn: addSN.value,
                    tag: addtag.value,
                    building: addBuilding.value,
                    room: addRoom.value,
                    type: 'desktop',
                    view: 'true'
                }
                
                fetch(`/desktop/computer`, {
                method: 'Put',
                body : JSON.stringify(data),
                headers: {
                    "Content-Type": "application/json",
                    }
                })
                .then(response => response.text())
                .then(data => {
                    if(data == 'added') {
                        addSN.value = ''
                        addtag.value = ''
                        addModal.classList.add('hidden')
                        showAlertSuccess('Computer was Added!')
                        getDesktop()
                    }
                });
        }

        function editDesktop() {                
                if(editmake.value == '') {
                    showAlertWarning('Select a model!')
                    return
                }

                if(editmodel.value == '') {
                    showAlertWarning('Select a model!')
                    return
                }

                if(editSN.value == "") {
                    showAlertWarning('Enter a Serial Number!')
                    return
                }

                if(edittag.value == '') {
                    showAlertWarning('Enter an asset tag!')
                    return
                }

                let data = {
                    make: editmake.value,
                    model: editmodel.value,
                    sn: editSN.value,
                    tag: edittag.value,
                    building: editBuilding.value,
                    room: editRoom.value,
                    type: 'desktop',
                    view: 'true'
                }
                
                fetch(`/desktop/computer?id=${editID}`, {
                method: 'POST',
                body : JSON.stringify(data),
                headers: {
                    "Content-Type": "application/json",
                    }
                })
                .then(response => response.text())
                .then(data => {
                    if(data == 'saved') {
                        editSN.value = ''
                        edittag.value = ''
                        editModal.classList.add('hidden')
                        editID = 0
                        showAlertSuccess('Computer was updated!')
                        getDesktop()
                    }
                });
        }

        function deleteDesktop(id, pc) {
            var answer = prompt(`Do you want to delete ${pc}? (yes/no)`);
            if (answer === "yes") {
                fetch(`/desktop/computer?id=${id}`, {method : 'delete'})
                .then(response => response.text())
                .then(data => {
                    if(data == 'deleted') {
                        showAlertSuccess(`${pc} was deleted`)
                        getDesktop()
                    }
                });
            } else if (answer === "no") {
                getDesktop()
            } else {
                 getDesktop()
            }
        }

        searchBox.addEventListener("input", () => {
            if(searchBox.length == 0) {
                getDesktop(1)
            } else {
                grid.innerHTML = ''
            fetch(`/desktop/search?search=${searchBox.value}`)
            .then(response => response.json())
            .then(data => {
                grid.innerHTML = ''
                for(let i = 0; i<data.length; i++) {
                    let obj =data[i];

                    let hddFree = obj.hdd.split('/')[1]
                    let hddTotal = obj.hdd.split('/')[0]
                    
                    let ramFree = obj.ram.split('/')[1]
                    let ramTotal = obj.ram.split('/')[0]

                    grid.innerHTML += `
                        <div class="${localStorage.getItem(obj.building)} p-4 rounded-md text-left grid grid-cols-3 gap-x-4">
                            <h2 class="col-span-3 text-lg font-semibold mb-2 text-center" id="name">${obj.name}</h2>
                            <p class="font-semibold text-right col-span-1">Make:</p>
                            <p class="col-span-2">${obj.make}</p>
                            <p class="font-semibold text-right col-span-1">Model:</p>
                            <p class="col-span-2">${obj.model}</p>
                            <p class="font-semibold text-right col-span-1">SN:</p>
                            <p class="col-span-2"id >${obj.sn}</p>
                            <p class="font-semibold text-right col-span-1">IP:</p>
                            <p class="col-span-2">${obj.ip}</p>
                            <p class="font-semibold text-right col-span-1">Ram:</p>
                            <p class="col-span-2">${ramFree} GB used of ${ramTotal} GB</p>
                            <p class="font-semibold text-right col-span-1">HDD:</p>
                            <p class="col-span-2">${hddFree} GB free of ${hddTotal} GB</p>
                            <p class="font-semibold text-right col-span-1">OS:</p>
                            <p class="col-span-2">${obj.os}</p>
                                    <button type="button" onclick="getEditPc('${obj.id}')" class="w-half bg-green-500 text-white p-2 rounded-md outline outline-offset-2 outline-white hover:bg-green-800 mt-6 col-span-2">Edit</button>
                                    <button type="button" onclick="deleteDesktop('${obj.id}', '${obj.name}')" class="w-half bg-red-500 text-white p-2 rounded-md outline outline-offset-2 outline-white rounded-md hover:bg-red-900 mt-6 col-span-1">Delete</button>
                        </div>`
                }
            })
            }
        })

        function DonwloadTools() { 
            window.location.href = '/pctools/Windows_tools.zip'
        }

         function dlTools() {
            alertify.confirm('TcAdmin PC Tool Download', 'Contanted in the zip file is the powershell script and an XML file to imort into Windows Task Scheduler. \n  You will need to change the server address for your server. If you are using Window Task Scheduler, copy the powershell script to C drive.', function(){ downloadFile('/pctools/Windows_tools.zip', 'Windows_tools.zip'); }
                , function(){ alertify.error('Cancel')});
        }

        getBuildings()
        getDesktop(1)
        getAddMake()
        
    </script>

</body>
</html>
