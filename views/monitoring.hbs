<!DOCTYPE html>
<html lang="en">
<head>
    <style>
        /* You may adjust these values as needed */
        .w-85 {
            width: 50%;
        }

        .h-70 {
            height: 55%;
        }
        #modal {
            align-items: center;
            justify-content: center;
        }

        .modal-btn {
            display: flex;
            justify-content: space-between;
            width: 100%;
        }

        .modal-btn button {
            flex: 1;
            margin-right: 8px; /* Add spacing between buttons */
        }

        .modal-btn button:last-child {
            margin-right: 0; /* Remove the margin from the last button */
        }


        .ql-editor {
            min-height: 96px;
            max-height: 150px;
            overflow-y: auto;
        }

        .ql-editor {
            margin-bottom: 10px;
        }



    </style>

    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <script src="https://qajavascriptsdktests.azurewebsites.net/JavaScript/dymo.connect.framework.js"></script>
    <link href="https://cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet">

    {{!-- <script defer src=".././dymo.js"></script> --}}
    <script defer src=".././menu.js"></script>
    <script defer src=".././label.js"></script> 
    <script src="https://cdn.tailwindcss.com"></script>
    <title>TC Admin - Networking Monitoring</title>
    <link rel="icon" type="image/png" sizes="32x32" href="../fav/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="../fav/favicon-16x16.png">

    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/alertifyjs/build/css/alertify.min.css"/>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/alertifyjs/build/css/themes/default.min.css"/>
    <script src="https://cdn.jsdelivr.net/npm/alertifyjs/build/alertify.min.js"></script>
    <script>

        function showAlertSuccess(text) {
            alertify.set('notifier','delay', 6);
            alertify.set('notifier','position', 'top-center');
            alertify.success(text);
        }
        function showalertwarning(text) {
            alertify.set('notifier','delay', 6);
            alertify.set('notifier','position', 'top-center');
            alertify.error(text);
        }
    </script>
</head>
<body class="bg-slate-800 h-screen flex">
<input type="text" id="textInput" placeholder="Type something" hidden>
    <!-- Left Side Menu -->
    <div class="w-1/6 bg-slate-950 text-white p-4 text-center">
        <img src="../img/tc-logo.png" style="width: 90%; height: auto; margin-bottom: 20px; padding: 1rem;">
        <ul id="menu">
            
        </ul>
    </div>

    <!-- Main Content -->
    <div class="flex-1 p-8">
       <div class="max-w-full w-full bg-white p-8 rounded shadow-md">
    <div class="flex items-center justify-between mb-4">
        <!-- Password Manager Passwords text -->
        <h1 class="text-2xl font-bold mb-4">Networking Monitoring</h1>

        <!-- Search Box and Add New Password Button Container -->
        <div class="flex items-center">
            <!-- Search Box -->
            <div class="flex items-center">
                <input type="text" id="search" oninput="searchDB(this.value)" placeholder="Search..." class="bg-gray-100 border border-gray-300 px-4 py-2 rounded-l-md focus:outline-none focus:ring-blue-500 focus:border-blue-500">
            </div>
            
            <!-- Add New Password Button -->
            <button class="bg-blue-500 text-white px-4 py-2 rounded-md ml-4" onclick="AddModal()"><i class="fa-solid fa-plus"></i> Add</button>
            
            {{!-- <button class="bg-green-500 text-white px-4 py-2 rounded-md ml-4" id="import"></i> Import</button> --}}
        </div>
    </div>

    <!-- Table -->
    <div class="relative h-[70vh] overflow-y-auto">
    <table class="w-full border-collapse border border-gray-800">
        <thead>
            <tr class="bg-gray-800 text-white">
                <th class="py-2 px-4 border">Network Device</th>
                <th class="py-2 px-4 border">Retry Attempts</th>
                <th class="py-2 px-4 border">IP Address</th>
                <th class="py-2 px-4 border">Last Chech-In Time</th>
                <th class="py-2 px-4 border">Status</th>
            </tr>
        </thead>
        <tbody class="text-center" id="password-table">
           
        </tbody>
    </table>
    </div>
     <div class="w-full text-right mt-4" id="pageBTN">
            <button id="prevButton" data-page="0" class="bg-gray-800 text-white py-2 px-4 rounded hover:bg-gray-700">Previous</button>
            <span id="pageIndicator">Page 1</span>
            <button id="nextButton" data-page="2" class="bg-gray-800 text-white py-2 px-4 rounded hover:bg-gray-700">Next</button>

        </div>
</div>
 

    <!-- Modal -->
    <div id="modal" class="fixed top-0 left-0 w-full h-full flex items-center justify-center bg-gray-800 bg-opacity-50 hidden" onclick="event.stopPropagation()">
    <div class="relative w-85 h-70 bg-white rounded shadow-md flex flex-col">
        
        
        <div id="modal-device">
            <div class="grid grid-cols-2 flex-grow">
            <div class="col-span-2 bg-white p-8 rounded-l">
                  
                    <!-- URL -->
                    <div class="mb-4">
                       <label for="modal-type" class="block text-gray-600 text-sm font-medium mb-2">Monitoring Type</label>
                        <select name="modal-type" id="modal-type" class="w-full px-3 py-2 border rounded-md focus:outline-none focus:border-blue-500">
                            <option value="ping">Select monitoring type</option>
                            <option value="ping">Ping</option>
                            <option value="http">HTTP Request</option>
                            <option value="scan">Port Scan</option>
                        </select>
                    </div>

                    <!-- Username/Email -->
                    <div class="mb-4">
                        <label for="modal-mac" class="block text-gray-600 text-sm font-medium mb-2">Port (if applicable)</label>
                        <input type="text" id="modal-port" name="modal-port" class="w-full px-3 py-2 border rounded-md focus:outline-none focus:border-blue-500" >
                    </div>

                    <!-- Password -->
                    <div class="mb-4">
                        <label for="modal-ip" class="block text-gray-600 text-sm font-medium mb-2">IP Address</label>
                        <input type="text" id="modal-ip" name="modal-ip" class="w-full px-3 py-2 border rounded-md focus:outline-none focus:border-blue-500" >
                    </div>

                    <!-- Device Name -->
                    <div class="mb-4">
                        <label for="modal-name" class="block text-gray-600 text-sm font-medium mb-2">Device Name</label>
                        <input type="text" id="modal-name" name="modal-name" class="w-full px-3 py-2 border rounded-md focus:outline-none focus:border-blue-500" >
                    </div>
                    
                    <!-- Retry Attempts -->
                    <div class="mb-4">
                        <label for="modal-retry" class="block text-gray-600 text-sm font-medium mb-2">Max Retry Attempts</label>
                        <input type="text" id="modal-retry" name="modal-retry" value="3" class="w-full px-3 py-2 border rounded-md focus:outline-none focus:border-blue-500" >
                    </div>

                   <div class="modal-btn mt-6 text-center">
                        <button type="button" id="modal-add" onclick="addDevice()" class="w-full bg-green-500 text-white p-2 rounded-md hover:bg-green-700 mb-4 hidden" onclick="">Add Device</button>
                        <button type="button" id="modal-save" onclick="editDevice()" class="w-full bg-sky-500 text-white p-2 rounded-md hover:bg-orange-700 mb-4 hidden" onclick="">Update Device</button>
                        <button type="button" id="modal-delete" onclick="deleteDevice()" class="w-full bg-red-500 text-white p-2 rounded-md hover:bg-orange-700 mb-4 hidden" onclick="">Delete Device</button>
                    </div>

                    <!-- Last Updated -->
                    {{!-- <div class="mb-6">

                        <label for="modal-tag" class="block text-gray-600 text-sm font-medium mb-2">Tag</label>
                        <input type="text" id="modal-tag" name="modal-tag" class="w-full px-3 py-2 border rounded-md focus:outline-none focus:border-blue-500" >
                        <br>
                        <label for="modal-installed" class="block text-gray-600 text-sm font-medium mb-2 hidden">Date Installed</label>
                        <input type="text" id="modal-installed" name="modal-installed" class="w-full px-3 py-2 border rounded-md focus:outline-none focus:border-blue-500 hidden" >

                        </select>
                    </div> --}}

                
                    <button class="absolute top-4 right-4 mr-6 text-gray-600" onclick="toggleModal()">
                        <i class="fa-solid fa-clock-rotate-left"></i>
                    </button>
                    <button class="absolute top-4 right-4 text-gray-600" onclick="closeModal()">
                        <i class="fas fa-times"></i>
                    </button>
            </div>
        </div>
        </div>
       
       
        <div id="modal-history" class="hidden">
                gfds
                    <button class="absolute top-4 right-4 mr-6 text-gray-600" onclick="toggleModal()">
                        <i class="fa-solid fa-clock-rotate-left"></i>
                    </button>
                    <button class="absolute top-4 right-4 text-gray-600" onclick="closeModal()">
                        <i class="fas fa-times"></i>
                    </button>
        </div>




    </div>
</div>
    
    <script defer>
        let modalView = 0
        let deviceid = 0;
        let modalType = document.getElementById('modal-type')
        let modalPort = document.getElementById('modal-port')
        let modalIP = document.getElementById('modal-ip')
        let modalName = document.getElementById('modal-name')
        let modalRetry = document.getElementById('modal-retry')


        let modalDevice = document.getElementById('modal-device')
        let modalHistory = document.getElementById('modal-history')

        let addBTN = document.getElementById('modal-add')
        let saveBTN = document.getElementById('modal-save')
        let deleteBTN = document.getElementById('modal-delete')
        

        
        

        function openModal(id) {
            fetch(`/monitoring/device?id=${id}`, { method: 'post' })
                .then(response => response.json())
                .then(data => {
                    console.log(data);
                    document.getElementById('modal').style.display = 'flex';
                    deviceid = id;
                    modalPort.value = data[0].port;
                    modalIP.value = data[0].ip;
                    modalName.value = data[0].name;
                    modalRetry.value = data[0].trys;
                    saveBTN.classList.remove('hidden');
                    deleteBTN.classList.remove('hidden');

                    for (let i = 0; i < modalType.options.length; i++) {
                        if (modalType.options[i].value === data[0].type) {
                            modalType.options[i].selected = true;
                            break; // Exit the loop once the option is found and selected
                        }
                    }
                });
        }

        function toggleModal() {
            if(modalView == 1) {
                modalDevice.classList.add('hidden')
                modalHistory.classList.remove('hidden')
                modalView = 0
            } else if(modalView == 0){
                modalDevice.classList.remove('hidden')
                modalHistory.classList.add('hidden')
                modalView = 1
            }
        }

        function AddModal() {
           document.getElementById('modal').style.display = 'flex';
           addBTN.classList.remove('hidden');
        }

        function addDevice() {
            let data = {
                    type: modalType.value,
                    name: modalName.value,
                    ip: modalIP.value,
                    port: modalPort.value,
                    trys: modalRetry.value
                }

            fetch(`/monitoring/add`,{
                method: 'Post',
                body : JSON.stringify(data),
                headers: {
                    "Content-Type": "application/json",
                    },
            })
                    .then(response => response.json())
                    .then(data => {
                        document.getElementById('password-table').innerHTML = '';
                        closeModal()
                        window.location.href = '/monitoring'
                    });
        }

        function editDevice() {
            let data = {
                    type: modalType.value,
                    name: modalName.value,
                    ip: modalIP.value,
                    port: modalPort.value,
                    trys: modalRetry.value
                }

            fetch(`/monitoring/edit?id=${deviceid}`,{
                method: 'Post',
                body : JSON.stringify(data),
                headers: {
                    "Content-Type": "application/json",
                    },
            })
                    .then(response => response.json())
                    .then(data => {
                        document.getElementById('password-table').innerHTML = '';
                        closeModal()
                        getList()
                        window.location.href = '/monitoring'
                    });
        }
        
        function deleteDevice() {
                    var answer = prompt(`Do you want to delete ${modalName.value}? (yes/no)`);
                    if (answer === "yes") {
                        fetch(`/monitoring/delete?id=${deviceid}`,{method : "post"})
                        .then(response => response.json())
                        .then(data => {
                            showAlertSuccess(`${modalName.value} was deleted from network monitoring!`)
                            closeModal()
                            getList(1)
                        }); 
                       
                    } else if (answer === "no") {
                        
                    } else {
                        
                    }
                }

        function closeModal() {
            document.getElementById('modal').style.display = 'none'
            deviceid = 0
            modalView = 0
            addBTN.classList.add('hidden')
            saveBTN.classList.add('hidden')
            deleteBTN.classList.add('hidden')
        }

        let currentPage = 1;
        const limit = 30; // Number of items per page

        let getList = (page = 1) => {
            function time(unixTime) {
                let unix_timestamp = unixTime; 
                let date = new Date(unix_timestamp * 1000);
                let formatted_date = date.toLocaleString('en-US', { timeZone: 'America/Chicago' });
                return formatted_date;
            }

            function isDown(status) {
                if (status == 'down') {
                    return 'bg-red-500';
                } else {
                    return
                }
            }

            document.getElementById('password-table').innerHTML = '';
            fetch(`/monitoring/list?page=${page}&limit=${limit}`)
                .then(response => response.json())
                .then(data => {
                    //console.log(data)
                    data.forEach(obj => {
                        let row = `
                            <tr class="${isDown(obj.status)}" onclick="openModal('${obj.id}')">
                                <td class="py-2 px-4 border">${obj.name}</td>
                                <td class="py-2 px-4 border">${obj.trys}</td>
                                <td class="py-2 px-4 border">${obj.ip}</td>
                                <td class="py-2 px-4 border">${time(obj.time)}</td>
                                <td class="py-2 px-4 border">${obj.status}</td>

                            </tr>`;
                        document.getElementById('password-table').innerHTML += row;
                    });
                });
                 currentPage = page;
                document.getElementById('pageIndicator').innerText = `Page ${currentPage}`;
        };

        document.getElementById('prevButton').addEventListener('click', () => {
            if (currentPage > 1) getList(currentPage - 1);
        });

        document.getElementById('nextButton').addEventListener('click', () => {
            getList(currentPage + 1); // You might want to check here if there are still more data
        });
       
        function searchDB (search){
            if(search.length < 1) {
                getList(1)
            } else {
                
            function isDown(status) {
                if (status == 'down') {
                    return 'bg-red-500';
                } else {
                    return
                }
            }
            document.getElementById('password-table').innerHTML = '';
            fetch(`/monitoring/?search=${search}`,{method : 'put'})
                .then(response => response.json())
                .then(data => {
                    data.forEach(obj => {
                        let row = `
                            <tr class="${isDown(obj.status)}" onclick="openModal('${obj.id}', '${obj.make}', '${obj.model}')">
                            <td class="py-2 px-4 border">${obj.make}</td>
                            <td class="py-2 px-4 border">${obj.model}</td>
                            <td class="py-2 px-4 border">${obj.ip}</td>
                            <td class="py-2 px-4 border">${obj.type}</td>
                            <td class="py-2 px-4 border">${obj.building}</td>
                        </tr>`;
                        document.getElementById('password-table').innerHTML += row;
                    });
                });
            }
        }


    getList(1)
    </script>

</body>
</html>
