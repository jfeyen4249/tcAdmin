<!DOCTYPE html>
<html lang="en">
<head>

    <style>
        .selected {
            background-color: darkgrey;
        }

        .btn {
            margin-left: -35px;
        }

        .w-85 {
            width: 85vw;
        }

        .top {
            margin-top: -40px;
        }

        .h-85 {
            height: 85vh;
        }

        .view-h {
            height: 60vh;
            max-height: 60vh;
            border: 2px #333 solid;
            border-radius: 10px;
            padding: 15px;
            overflow: scroll;
        }

        #editor {
            height: 100vw;
        }

        .docs {
            width: 50%;
        }
        .docs-btn {
            width: 300px;
        }

        #mview {
            display: none;
        }

        #madd {
            display: none;
        }

        .modal-btn {
            position: fixed;
            right: 0;
            margin-right: 170px;
            margin-top: 10px;
        }

       



    </style>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <link href="https://cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet">
            <script src="https://cdn.quilljs.com/1.3.6/quill.js"></script>
    <script src="https://unpkg.com/quill-html-edit-button@2.2.7/dist/quill.htmlEditButton.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <script src="https://cdn.tailwindcss.com"></script>
    <script defer src=".././menu.js"></script>
    <title>TC Admin - IT Docmentation</title>
    <link rel="icon" type="image/png" sizes="32x32" href="../fav/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="../fav/favicon-16x16.png">

    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/alertifyjs/build/css/alertify.min.css"/>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/alertifyjs/build/css/themes/default.min.css"/>
    <script src="https://cdn.jsdelivr.net/npm/alertifyjs/build/alertify.min.js"></script>
    <script>

        function showAlertSuccess(text) {
            alertify.set('notifier','delay', 6);
            alertify.set('notifier','position', 'top-center');
            alertify.success(text);
        }
        function showAlertWarning(text) {
            alertify.set('notifier','delay', 6);
            alertify.set('notifier','position', 'top-center');
            alertify.error(text);
        }
    </script>
</head>

<div id="notification" class="text-white p-4 mr-12 mt-36 rounded-md shadow-md fixed min-w-64 right-0 top-0 hidden animate-slide-in-right">
        <span id="noteText"></span>
    </div>

<body class="bg-slate-800 h-screen flex">
    

    <!-- Left Side Menu -->
    <div class="w-1/6 bg-slate-950 text-white p-4 text-center">
        <img src="./img/tc-logo.png" style="width: 90%; height: auto; margin-bottom: 20px; padding: 1rem;">
        <ul id="menu">
            
        </ul>
    </div>

    <!-- Main Content -->
    
            
<div class="flex-1 p-8">
    <div class="max-w-full w-full bg-white p-8 rounded shadow-md">
        <div class="flex items-center justify-between mb-4">
            <h1 class="text-2xl font-bold">IT Documentation</h1>
            <div class="flex items-center">
                <input type="text" id="search" placeholder="Search..." class="bg-gray-100 border border-gray-300 px-4 py-2 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500">
                <button class="bg-green-500 text-white px-4 py-2 rounded-md ml-4" onclick="openAddDoc()"><i class="fa-solid fa-plus" ></i> New Doc</button>                
            </div>
        </div>

        <!-- Table -->
    <div class="relative h-[70vh] overflow-y-auto">
        <table class="w-full border-collapse border border-gray-800" id="docs-table">
            {{!-- <thead>
                <tr class="bg-gray-800 text-white">
                    <th class="py-2 px-4 border">Document</th>
                    <th class="py-2 px-4 border">Last Updated</th>
                </tr>
            </thead> --}}
            <tbody class="text-center" id="doc-table">
                
            </tbody>
        </table>
    </div>
    <div class="w-full text-right mt-4" id="pageBTN">
    <button id="prevButton" data-page="0" class="bg-gray-800 text-white py-2 px-4 rounded hover:bg-gray-700">Previous</button>
    <span id="pageIndicator">Page 1</span>
    <button id="nextButton" data-page="2" class="bg-gray-800 text-white py-2 px-4 rounded hover:bg-gray-700">Next</button>
</div>

    </div>
</div>

<!-- Modal -->
<div id="modal-view" class="fixed top-0 left-0 w-full h-full bg-gray-950 bg-opacity-95 hidden" ondblclick="event.stopPropagation()">
    <div id="mview">
        <div class="w-85 mx-auto mt-5 bg-white p-8 rounded shadow-md h-85">
        <h2 class="text-2xl font-bold mb-4 text-center" id="show-doc-title"></h2><hr>
       <div>
            <div id="show-doc-text" class="h-[62vh] ui-syle"></dir>
        </div>
                
        <div class="mt-4 text-right mr-4">      
            <button type="button" id="modal-save-btn" class="w-half bg-green-500 text-white p-2 rounded-md hover:bg-orange-700 mb-4" onclick="closeModal()">Close</button>      
        </div>
    </div>
    </div>
</div>

<div id="madd">
     <div class="w-85 mx-auto mt-5 bg-white p-8 rounded shadow-md h-85">
        <h2 class="text-2xl font-bold mb-4 text-center">Add Documentation</h2>
       <div class="mb-6">
            <label for="modal-title" class="block text-gray-600 text-sm font-medium mb-2">Document Name</label>
            <input type="text" id="doc-title" name="modal-title" class="w-full px-3 py-2 border rounded-md focus:outline-none focus:border-blue-500" >
       </div>
       
       <div>
            <div id="editor" class="w-full max-h-[50vh] px-3 py-2 border rounded-md focus:outline-none focus:border-blue-500 border-gray-700">
        </div>

 <div class="modal-btn">
    {{!-- <button type="button" id="modal-add-button" class="w-half bg-green-500 text-white p-2 rounded-md hidden" onclick="addDoc()">Add </button> --}}
    <button type="button" id="modal-add-button" class="w-half bg-green-500 text-white p-2 rounded-md" onclick="addDoc()">Add Doc</button>
    <button type="button" id="modal-edit-btn" class="w-half bg-orange-500 text-white p-2 rounded-md hidden" onclick="editDoc()">Save Doc</button>      
    <button type="button" id="modal-save-btn" class="w-half bg-red-500 text-white p-2 rounded-md" onclick="closeModal();">Cancel</button>      
</div>

</div>

    <script>
        var toolbarOptions = [
        ['bold', 'italic', 'underline', 'strike'],        // toggled buttons
        ['code-block'],

        [{ 'header': 1 }, { 'header': 2 }],               // custom button values
        [{ 'list': 'ordered'}, { 'list': 'bullet' }],
        [{ 'indent': '-1'}, { 'indent': '+1' }],          // outdent/indent
        [ 'link', 'image', 'video', 'formula' ],  
        [{ 'color': [] }, { 'background': [] }],          // dropdown with defaults from theme
        [{ 'align': [] }],

        ];
        Quill.register("modules/htmlEditButton", htmlEditButton);
        var quill = new Quill('#editor', {
        modules: {
            toolbar: toolbarOptions,
            htmlEditButton: {
            debug: true, // logging, default:false
            msg: "Edit the content in HTML format", //Custom message to display in the editor, default: Edit HTML here, when you click "OK" the quill editor's contents will be replaced
            okText: "Ok", // Text to display in the OK button, default: Ok,
            cancelText: "Cancel", // Text to display in the cancel button, default: Cancel
            buttonHTML: "&lt;&gt;", // Text to display in the toolbar button, default: <>
            buttonTitle: "Show HTML source", // Text to display as the tooltip for the toolbar button, default: Show HTML source
            syntax: false, // Show the HTML with syntax highlighting. Requires highlightjs on window.hljs (similar to Quill itself), default: false
            prependSelector: 'div#myelement', // a string used to select where you want to insert the overlayContainer, default: null (appends to body),
            editorModules: {} // The default mod
            }
        },
        theme: 'snow'
        });

        var table = document.getElementById("docs-table");
        var rows = table.getElementsByTagName("tr");
        let docID = 0
        let docName = ''
        let viewModal = document.getElementById('modal-view')
        let madd = document.getElementById('madd')
        let mview = document.getElementById('mview')
        let editModalBTN = document.getElementById('modal-edit-btn')
        let addModalBTN = document.getElementById('modal-add-button')
        let docTitle = document.getElementById('doc-title')
        let searchBox = document.getElementById('search')

        var DocView = new Quill('#show-doc-text', {
            theme: 'snow',
            readOnly: true,  // Set to read-only
            modules: {
                toolbar: false  // Disable toolbar
            }
        });

        function openModal(id) {
            viewModal.style.display = 'inline'
            mview.style.display = 'inline'
            fetch(`/docs/doc?id=${id}`)
  		    .then(response => response.json())
            .then(data => {
                    document.getElementById('show-doc-title').innerText = data[0].doc
                    DocView.root.innerHTML = data[0].doc_body
                }); 
        }

        let currentPage = 1;
        const limit = 30;

        function getDocs(page = 1) {
            document.getElementById('docs-table').innerHTML = ''
            fetch(`/docs/list?page=${page}&limit=${limit}`)
                .then(response => response.json())
                .then(data => {
                    //console.log(data)
                    data.forEach(obj => {
                        let row = `
                            <tr class="docs" ondblclick="openModal('${obj.id}')">
                            <td class="py-2 px-4 border docs">${obj.doc}</td>
                            <td class="py-2 px-4 border">${obj.date}</td>
                            <td class="py-2 px-4 border docs-btn">
                                <button class="bg-yellow-500 text-white px-4 py-2 rounded-md ml-4" onclick="openEditDoc(${obj.id})"><i class="fa-regular fa-pen-to-square" ></i> Edit Doc</button>
                                <button class="bg-red-500 text-white px-4 py-2 rounded-md" onclick="deleteDoc(${obj.id})"><i class="fa-solid fa-trash"></i> Delete Doc</button>
                            </td>
                        </tr>`;
                        document.getElementById('docs-table').innerHTML += row; // Corrected table ID
                    });
                });
            currentPage = page;
            document.getElementById('pageIndicator').innerText = `Page ${currentPage}`;
        }

        document.getElementById('prevButton').addEventListener('click', () => {
            if (currentPage > 1) getDocs(currentPage - 1);
        });

        document.getElementById('nextButton').addEventListener('click', () => {
            getDocs(currentPage + 1); // You might want to check here if there are still more data
        });

         function closeModal() {
            viewModal.style.display = 'none'
            mview.style.display = 'none'
            madd.style.display = 'none'
            addModalBTN.style.display = 'none'
            editModalBTN.style.display = 'none'
            docTitle.value = ''
            quill.root.innerHTML = ""
            docName = ''
            docID = 0
        }

        function openAddDoc() {
            console.log('Add Clicked!')
            viewModal.style.display = 'inline'
            madd.style.display = 'inline'
            addModalBTN.style.display = 'inline'
        }

        function openEditDoc(id) {
            viewModal.style.display = 'inline'
            editModalBTN.style.display = 'inline'
            madd.style.display = 'inline'
            docID = id
            fetch(`/docs/doc?id=${id}`)
  		    .then(response => response.json())
            .then(data => {
                    docTitle.value = data[0].doc
                    quill.root.innerHTML  = data[0].doc_body
                }); 
        }

        searchBox.addEventListener("input", () => {
            if(searchBox.length = 0) {
                getDDocs(1)
            } else {
            document.getElementById('docs-table').innerHTML = ''
            fetch(`/docs/search?search=${searchBox.value}`)
            .then(response => response.json())
            .then(data => {
                data.forEach(obj => {
                        let row = `
                            <tr class="docs" ondblclick="openModal('${obj.id}')">
                            <td class="py-2 px-4 border docs">${obj.doc}</td>
                            <td class="py-2 px-4 border">${obj.date}</td>
                            <td class="py-2 px-4 border docs-btn">
                                <button class="bg-yellow-500 text-white px-4 py-2 rounded-md ml-4" onclick="openEditDoc(${obj.id})"><i class="fa-regular fa-pen-to-square" ></i> Edit Doc</button>
                                <button class="bg-red-500 text-white px-4 py-2 rounded-md" onclick="deleteDoc(${obj.id})"><i class="fa-solid fa-trash"></i> Delete Doc</button>
                            </td>
                        </tr>`;
                        document.getElementById('docs-table').innerHTML += row; // Corrected table ID
                    });
            })
            }
        })
        
        function addDoc() {
            {{!-- if(docTitle.value !== ''){
                showAlertWarning('Enter the document title!')
                return
            }

            if(docBody !== "<p><br></p>"){
                showAlertWarning('Enter the document title!')
                return
            } --}}

            let data = {
                doc: docTitle.value,
                body: quill.root.innerHTML
            }

            fetch('/docs/doc',{
                method: 'Put',
                body : JSON.stringify(data),
                headers: {
                    "Content-Type": "application/json",
                    },
            })
  		    .then(response => response.json())
            .then(data => {
                    if(data.affectedRows == 1) {
                        showAlertSuccess(docTitle.value + ' was added to documentation.')
                        getDocs()
                        closeModal()
                    } else {
                        showAlertWarning("Error: this document was not added!!!");
                    }
                });
        }

        function editDoc() {
            {{!-- if(docTitle.value !== ''){
                showAlertWarning('Enter the document title!')
                return
            }

            if(docBody !== "<p><br></p>"){
                showAlertWarning('Enter the document title!')
                return
            } --}}

            let data = {
                id : docID,
                doc: docTitle.value,
                body: quill.root.innerHTML
            }

            fetch(`/docs/doc?id=${docID}`,{
                method: 'Post',
                body : JSON.stringify(data),
                headers: {
                    "Content-Type": "application/json",
                    },
            })
  		    .then(response => response.json())
            .then(data => {
                    if(data.affectedRows == 1) {
                        showAlertSuccess(`${docTitle.value} was updated!`)
                        getDocs()
                        closeModal()
                    } else {
                        showAlertWarning(`Error: ${docTitle.value} could not be edited!!!`);
                    }
                });
        }

        function deleteDoc(id) {
            fetch(`/docs/doc?id=${id}`)
  		    .then(response => response.json())
            .then(data => {docName = data[0].doc}); 
            console.log(docName)
            var answer = prompt(`Do you want to delete ${docName}? (yes/no)`);
            if (answer === "yes") {
                fetch(`/docs/doc?id=${id}&Name=${docName}`,{method : "Delete"})
                .then(response => response.json())
                .then(data => {
                    showAlertSuccess(`${docName} was deleted!`)
                    document.getElementById('docs-table').innerHTML = ''
                    getDocs(1)
                    closeModal()
                }); 
                docID = 0
                docName = ''
            } else if (answer === "no") {
                docID = 0
                docName = ''

            } else {
                 docID = 0
                 docName = ''

            }
            

        }

       getDocs(1)
    </script>

</body>
</html>