<!DOCTYPE html>
<html lang="en">
<head>
   <style>
     .wpc {
        width: 30vw;
    }
   </style>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <script src="https://cdn.tailwindcss.com"></script>
     <script defer src=".././menu.js"></script>
    <title>TC Admin - Server Inventory</title>
    <link rel="icon" type="image/png" sizes="32x32" href="../fav/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="../fav/favicon-16x16.png">

    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/alertifyjs/build/css/alertify.min.css"/>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/alertifyjs/build/css/themes/default.min.css"/>
    <script src="https://cdn.jsdelivr.net/npm/alertifyjs/build/alertify.min.js"></script>
    <script>

        function showAlertSuccess(text) {
            alertify.set('notifier','delay', 6);
            alertify.set('notifier','position', 'top-center');
            alertify.success(text);
        }
        function showalertwarning(text) {
            alertify.set('notifier','delay', 6);
            alertify.set('notifier','position', 'top-center');
            alertify.error(text);
        }
    </script>
</head>
    
    <div id="notification" class="bg-gray-800 text-white p-4 mr-12 mt-36 rounded-md shadow-md fixed min-w-64 right-0 top-0 hidden animate-slide-in-right">
        <span id="noteText"></span>
    </div>

<body class="bg-slate-800 h-screen flex">

    <!-- Left Side Menu -->
    <div class="w-1/6 bg-slate-950 text-white p-4 text-center">
        <img src="../img/tc-logo.png" style="width: 90%; height: auto; margin-bottom: 20px; padding: 1rem;">
        <ul id="menu">
            
        </ul>
    </div>

    <!-- Main Content -->
    <div class="flex-1 p-8">
       <div class="max-w-full w-full bg-white p-8 rounded shadow-md">
    <div class="flex items-center justify-between mb-4">
        <!-- Password Manager Passwords text -->
        <h1 class="text-2xl font-bold mb-4">Server Inventory</h1>

        <!-- Search Box and Add New Password Button Container -->
        <div class="flex items-center">
            <!-- Search Box -->
            <div class="flex items-center">
                <input type="text" id="search" placeholder="Search..." class="bg-gray-100 border border-gray-300 px-4 py-2 rounded-l-md focus:outline-none focus:ring-blue-500 focus:border-blue-500">
            </div>
            
            <!-- Add New Password Button -->
            <button class="bg-blue-500 text-white px-4 py-2 rounded-md ml-4" onclick="document.getElementById('add-modal').classList.remove('hidden')"><i class="fa-solid fa-plus"></i> Add</button>
        </div>
    </div>

    <!-- Table -->
    <div class="relative h-[70vh] overflow-y-auto">
        <table class="w-full border-collapse border border-gray-800" >
            
            <div class="grid grid-cols-3 gap-2 mt-3 w-full text-center" id="grid">
                    
                </div>
        </table>
    </div>
        <div class="w-full text-right mt-4" id="pageBTN">
            <button id="prevButton" data-page="0" class="bg-gray-800 text-white py-2 px-4 rounded hover:bg-gray-700">Previous</button>
            <span id="pageIndicator">Page 1</span>
            <button id="nextButton" data-page="2" class="bg-gray-800 text-white py-2 px-4 rounded hover:bg-gray-700">Next</button>
        </div>
    </div>

    <!-- Modal -->
    <div id="add-modal" class="fixed top-0 left-0 w-full h-full bg-gray-800 bg-opacity-50 hidden" onclick="event.stopPropagation()">
        <div class="wpc mx-auto mt-20 bg-white p-8 rounded shadow-md">
            <h2 class="text-2xl font-bold mb-4 text-center">Add Server</h2>
            <form>
                <!-- Documentation Title -->
                <div class="mb-4">
                    <label for="modal-title" class="block text-gray-600 text-sm font-medium mb-2">Mac Address</label>
                    <input type="text" id="modal-mac-add" name="modal-title" placeholder="Enter as 1a:2b:3c:4d:5e:6f:aa:11" class="w-full px-3 py-2 border rounded-md focus:outline-none focus:border-blue-500" required>
                </div>

                <div class="mb-4">
                        <label for="modal-make" class="block text-gray-600 text-sm font-medium mb-2">PC Make</label>
                        <select name="modal-make" id="modal-make-add" class="w-full px-3 py-2 border rounded-md focus:outline-none focus:border-blue-500">
                        </select>
                </div>
               
               <div class="mb-4">
                        <label for="modal-model" class="block text-gray-600 text-sm font-medium mb-2">PC Model</label>
                        <select name="modal-model" id="modal-model-add" class="w-full px-3 py-2 border rounded-md focus:outline-none focus:border-blue-500"></select>
                    </div>

                <div class="mb-4">
                    <label for="modal-sn" class="block text-gray-600 text-sm font-medium mb-2">Serial Number</label>
                    <input type="text" id="modal-sn-add" name="modal-sn" class="w-full px-3 py-2 border rounded-md focus:outline-none focus:border-blue-500" required>
                </div>

                <!-- Save Button -->
                <button type="button" onclick="addDesktop()" class="w-half bg-green-500 text-white p-2 rounded-md hover:bg-blue-600">Add Server</button>
                <button type="button" onclick="document.getElementById('add-modal').classList.add('hidden')" class="w-half bg-red-500 text-white p-2 rounded-md hover:bg-red-600">Close</button>
            </form>
        </div>
    </div>

    <!-- Modal -->
    <div id="edit-modal" class="fixed top-0 left-0 w-full h-full bg-gray-800 bg-opacity-50 hidden" onclick="event.stopPropagation()">
        <div class="wpc mx-auto mt-2 bg-white p-8 rounded shadow-md">
            <h2 class="text-2xl font-bold mb-4 text-center">Edit Server</h2>
            <form>
                <!-- Documentation Title -->
                <div class="mb-4">
                    <label for="modal-title" class="block text-gray-600 text-sm font-medium mb-2">Mac Address</label>
                    <input type="text" id="modal-mac-edit" name="modal-title" placeholder="Enter as 1a:2b:3c:4d:5e:6f:aa:11" class="w-full px-3 py-2 border rounded-md focus:outline-none focus:border-blue-500" required>
                </div>

                <div class="mb-4">
                        <label for="modal-make" class="block text-gray-600 text-sm font-medium mb-2">PC Make</label>
                        <select name="modal-make" id="modal-make-edit" class="w-full px-3 py-2 border rounded-md focus:outline-none focus:border-blue-500">
                        </select>
                </div>
               
               <div class="mb-4">
                        <label for="modal-model" class="block text-gray-600 text-sm font-medium mb-2">PC Model</label>
                        <select name="modal-model" id="modal-model-edit" class="w-full px-3 py-2 border rounded-md focus:outline-none focus:border-blue-500"></select>
                    </div>

                <div class="mb-4">
                    <label for="modal-sn" class="block text-gray-600 text-sm font-medium mb-2">Serial Number</label>
                    <input type="text" id="modal-sn-edit" name="modal-sn" class="w-full px-3 py-2 border rounded-md focus:outline-none focus:border-blue-500" required>
                </div>

                <!-- Save Button -->
                <button type="button" onclick="editDesktop()" class="w-half bg-green-500 text-white p-2 rounded-md hover:bg-blue-600">Update Server</button>
                <button type="button" onclick="document.getElementById('edit-modal').classList.add('hidden')" class="w-half bg-red-500 text-white p-2 rounded-md hover:bg-red-600">Close</button>
            </form>
        </div>
    </div>

    <script defer>
        let grid = document.getElementById('grid')
        let addModal = document.getElementById('add-modal')
        let addmake = document.getElementById('modal-make-add')
        let addmodel = document.getElementById('modal-model-add')
        let addSN = document.getElementById('modal-sn-add')
        //let addtag = document.getElementById('modal-tag-add')
        let addmac = document.getElementById('modal-mac-add')
        //let addBuilding = document.getElementById('modal-building-add')
        //let addRoom = document.getElementById('modal-room-add')
        let editID = 0
        let editModal = document.getElementById('edit-modal')
        let editmake = document.getElementById('modal-make-edit')
        let editmodel = document.getElementById('modal-model-edit')
        let editSN = document.getElementById('modal-sn-edit')
        //let edittag = document.getElementById('modal-tag-edit')
        let editmac = document.getElementById('modal-mac-edit')
        //let editBuilding = document.getElementById('modal-building-edit')
        //let editRoom = document.getElementById('modal-room-edit')

        let searchBox = document.getElementById('search')
 
        addmake.addEventListener("input", function() {getAddModel()})

        function isValidMACAddress(macAddress) {
            var macRegex = /^([0-9A-Fa-f]{2}[:-]){7}[0-9A-Fa-f]{2}$/;
            return macRegex.test(macAddress);
        }

        function getEditPc(id) {
            editID = id
            fetch(`/servers/computer?id=${id}`)
                .then(response => response.json())
                .then(data => {
                    console.log(data)
                    let obj = data[0]
                    editmac.value = obj.mac
                    editSN.value = obj.sn


                    var selectElement = editmake; 
                    for (var i = 0; i < selectElement.options.length; i++) {
                        var option = selectElement.options[i];
                        if (option.value === obj.make) {
                            option.selected = true;
                            getEditModel(obj.model)
                            break;
                        }   
                    }

                   

                });
            editModal.classList.remove('hidden')
        }

        let currentPage = 1;
        const limit = 30; // Number of items per page

        function getDesktop(page = 1) {
            grid.innerHTML = ''
            fetch(`/servers/list?page=${page}&limit=${limit}`)
            .then(response => response.json())
            .then(data => {
                grid.innerHTML = ''
                for(let i = 0; i<data.length; i++) {
                    let obj =data[i];
                    
                    let hddFree = obj.hdd.split('/')[1]
                    let hddTotal = obj.hdd.split('/')[0]
                    
                    let ramFree = obj.ram.split('/')[1]
                    let ramTotal = obj.ram.split('/')[0]
                   
                    grid.innerHTML += `
                        <div class="bg-gray-300 p-4 rounded-md text-left grid grid-cols-3 gap-x-4">
                            <h2 class="col-span-3 text-lg font-semibold mb-2 text-center" id="name">${obj.name}</h2>
                            <p class="font-semibold text-right col-span-1">Make:</p>
                            <p class="col-span-2">${obj.make}</p>
                            <p class="font-semibold text-right col-span-1">Model:</p>
                            <p class="col-span-2">${obj.model}</p>
                            <p class="font-semibold text-right col-span-1">SN:</p>
                            <p class="col-span-2">${obj.sn}</p>
                            
                            <p class="font-semibold text-right col-span-1">IP:</p>
                            <p class="col-span-2">${obj.ip}</p>
                            <p class="font-semibold text-right col-span-1">Ram:</p>
                            <p class="col-span-2">${ramFree} GB used of ${ramTotal} GB</p>
                            <p class="font-semibold text-right col-span-1">HDD:</p>
                            <p class="col-span-2">${hddFree} GB free of ${hddTotal} GB</p>
                            <p class="font-semibold text-right col-span-1">OS:</p>
                            <p class="col-span-2">${obj.os}</p>
                                    <button type="button" onclick="getEditPc('${obj.id}')" class="w-half bg-green-500 text-white p-2 rounded-md outline outline-offset-2 outline-white hover:bg-green-800 mt-6 col-span-2">Edit</button>
                                    <button type="button" onclick="deleteDesktop('${obj.id}', '${obj.name}')" class="w-half bg-red-500 text-white p-2 rounded-md outline outline-offset-2 outline-white rounded-md hover:bg-red-900 mt-6 col-span-1">Delete</button>
                        </div>`
                }
            })
            currentPage = page;
            document.getElementById('pageIndicator').innerText = `Page ${currentPage}`;
        }

        document.getElementById('prevButton').addEventListener('click', () => {
            if (currentPage > 1) getDesktop(currentPage - 1);
        });

        document.getElementById('nextButton').addEventListener('click', () => {
            getDesktop(currentPage + 1); // You might want to check here if there are still more data
        });

        function getAddMake() {
            document.getElementById('modal-make-add').innerHTML = 
            document.getElementById('modal-make-add').innerHTML = '<option value="">Select a Make</option>'
            editmake.innerHTML = '<option value="">Select a Make</option>'
            fetch(`/servers/make/`)
                .then(response => response.json())
                .then(data => {
                    for(let i=0; i<data.length; i++) {
                    let obj = data[i];
                        document.getElementById('modal-make-add').innerHTML += `<option value="${obj.make}">${obj.make}</option>`;
                        editmake.innerHTML += `<option value="${obj.make}">${obj.make}</option>`;
                    }
                });
        }

         function getAddModel() {
            fetch(`/servers/model?make=${addmake.value}`)
                .then(response => response.json())
                .then(data => {
                    addmodel.innerHTML = '<option value="">Select a Model</option>'
                    editmodel.innerHTML = '<option value="">Select a Model</option>'
                    for(let i=0; i<data.length; i++) {
                    let obj = data[i];
                        addmodel.innerHTML += `<option value="${obj.model}">${obj.model}</option>`;
                    }
                });
        }

         function getEditModel(model) {
            fetch(`/servers/model?make=${editmake.value}`)
                .then(response => response.json())
                .then(data => {
                    editmodel.innerHTML = '<option value="">Select a Model</option>'
                    for(let i=0; i<data.length; i++) {
                    let obj = data[i];
                        editmodel.innerHTML += `<option value="${obj.model}">${obj.model}</option>`;
                    }

                    var selectModel = editmodel; 
                            for (var i = 0; i < selectModel.options.length; i++) {
                                console.log(selectModel.value)
                                var option = selectModel.options[i];
                                if (option.value === model) {
                                    console.log("Running")
                                    option.selected = true;
                                    break;
                                }   
                            }

                });
        }

        function addDesktop() {
                if(addmac.value == '') {
                    showalertwarning('Enter a Mac Address!')
                }else {

                }
                
                if(addmake.value == '') {
                    showalertwarning('Select a model!')
                    return
                }

                if(addmodel.value == '') {
                    showalertwarning('Select a model!')
                    return
                }

                if(addSN.value == "") {
                    showalertwarning('Enter a Serial Number!')
                    return
                }


                let data = {
                    make: addmake.value,
                    model: addmodel.value,
                    sn: addSN.value,
                    mac: addmac.value,
                    type: 'server',
                    view: 'true'
                }
                
                fetch(`/servers/computer`, {
                method: 'Put',
                body : JSON.stringify(data),
                headers: {
                    "Content-Type": "application/json",
                    }
                })
                .then(response => response.text())
                .then(data => {
                    if(data == 'added') {
                        addmac.value = ''
                        addSN.value = ''
                        addModal.classList.add('hidden')
                        showAlertSuccess('Server was updated!', 'bg-orange-700')
                        getDesktop()
                    }
                });
        }

        function editDesktop() {
                if(editmac.value == '') {
                    showalertwarning('Enter a Mac Address!')
                }else {

                }
                
                if(editmake.value == '') {
                    showalertwarning('Select a model!')
                    return
                }

                if(editmodel.value == '') {
                    showalertwarning('Select a model!')
                    return
                }

                if(editSN.value == "") {
                    showalertwarning('Enter a Serial Number!')
                    return
                }

                let data = {
                    make: editmake.value,
                    model: editmodel.value,
                    sn: editSN.value,
                    mac: editmac.value,
                    type: 'server',
                    view: 'true'
                }
                
                fetch(`/servers/computer?id=${editID}`, {
                method: 'POST',
                body : JSON.stringify(data),
                headers: {
                    "Content-Type": "application/json",
                    }
                })
                .then(response => response.text())
                .then(data => {
                    if(data == 'saved') {
                        editmac.value = ''
                        editSN.value = ''
                        editModal.classList.add('hidden')
                        editID = 0
                        showAlertSuccess('Server was updated!', 'bg-orange-700')
                        getDesktop()
                    }
                });
        }

        function deleteDesktop(id, pc) {
            var answer = prompt(`Do you want to delete ${pc}? (yes/no)`);
            if (answer === "yes") {
                fetch(`/servers/computer?id=${id}`, {method : 'delete'})
                .then(response => response.text())
                .then(data => {
                    if(data == 'deleted') {
                        showAlertSuccess(`${pc} was deleted`)
                        getDesktop()
                    }
                });
            } else if (answer === "no") {
                getDesktop()
            } else {
                 getDesktop()
            }


            
        }

        searchBox.addEventListener("input", () => {
            if(searchBox.length = 0) {
                getDesktop()
            } else {
                grid.innerHTML = ''
            fetch(`/servers/search?search=${searchBox.value}`)
            .then(response => response.json())
            .then(data => {
                grid.innerHTML = ''
                for(let i = 0; i<data.length; i++) {
                    let obj =data[i];

                    function buildingColor(building) {
                        if(building == 'DAC') {
                            return 'bg-green-400'
                        }

                        if(building == 'NS') {
                            return 'bg-yellow-400'
                        }

                        if(building == 'PS') {
                            return 'bg-red-400'
                        }

                        if(building == 'ABE') {
                            return 'bg-lime-400'
                        }

                        if(building == 'MHS') {
                            return 'bg-blue-400'
                        }

                        if(building == 'MMS') {
                            return 'bg-orange-400'
                        }
                    }
                    grid.innerHTML += `
                        <div class="${buildingColor(obj.building)} p-4 rounded-md text-left grid grid-cols-3 gap-x-4">
                            <h2 class="col-span-3 text-lg font-semibold mb-2 text-center" id="name">${obj.name}</h2>
                            <p class="font-semibold text-right col-span-1">Make:</p>
                            <p class="col-span-2">${obj.make}</p>
                            <p class="font-semibold text-right col-span-1">Model:</p>
                            <p class="col-span-2">${obj.model}</p>
                            <p class="font-semibold text-right col-span-1">SN:</p>
                            <p class="col-span-2">${obj.sn}</p>
                            <p class="font-semibold text-right col-span-1">Mac:</p>
                            <p class="col-span-2">${obj.mac}</p>
                            <p class="font-semibold text-right col-span-1">IP:</p>
                            <p class="col-span-2">${obj.ip}</p>
                            <p class="font-semibold text-right col-span-1">Ram:</p>
                            <p class="col-span-2">${obj.ram} GB</p>
                            <p class="font-semibold text-right col-span-1">HDD:</p>
                            <p class="col-span-2">${obj.hdd}</p>
                            <p class="font-semibold text-right col-span-1">OS:</p>
                            <p class="col-span-2">${obj.os}</p>
                                    <button type="button" onclick="getEditPc('${obj.id}')" class="w-half bg-green-500 text-white p-2 rounded-md outline outline-offset-2 outline-white hover:bg-green-800 mt-6 col-span-2">Edit</button>
                                    <button type="button" onclick="deleteDesktop('${obj.id}', '${obj.name}')" class="w-half bg-red-500 text-white p-2 rounded-md outline outline-offset-2 outline-white rounded-md hover:bg-red-900 mt-6 col-span-1">Delete</button>
                        </div>`



                }
            })
            }
        })


        getDesktop()
        getAddMake()

        
    </script>

</body>
</html>
