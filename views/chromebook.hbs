<!DOCTYPE html>
<html lang="en">
<head>
    <style>
        /* You may adjust these values as needed */
        .w-85 {
            width: 75%;
        }

        .h-70 {
            height: 75%;
        }
        #modal {
            align-items: center;
            justify-content: center;
        }

        .modal-btn {
            position: absolute;
            left: 50%;
            transform: translate(45%);
        }

        .ql-editor {
            min-height: 96px;
            max-height: 150px;
            overflow-y: auto;
        }

        .ql-editor {
            margin-bottom: 10px;
        }

        .modal-width {
            max-width: 30vw;
            width: 30vw;
        }

        .tab-width {
            max-width: 90vw;
            width: 90vw;

        }

        .tablink {
            border-top-left-radius: 10px;
            border-top-right-radius: 10px;
        }

        .tabcontent {
            border: #F35D07 4px solid;
            border-radius: 10px;
            min-height: 85vh;
            max-height: 85vh;
        }

        .active {
            background-color: #F35D07;
            color: white;
        }


        
        .repair-reason {
            width: 10%;
        }
        
        .repair-info {
            width: 85%;
        }
        
        .repair-date {
            width: 10%;
        }

        .orange-background {
            background-color: #F35D07;
        }

        table {
            border-collapse: collapse;
            width: 100%;
        }
        
        #explaination {
            
            width: 95%;
        }


    </style>

    <link rel="apple-touch-icon" sizes="180x180" href="../fav/apple-touch-icon.png">
    <link rel="icon" type="image/png" sizes="32x32" href="../fav/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="../fav/favicon-16x16.png">
    <link rel="manifest" href="../fav/site.webmanifest">
    <link rel="mask-icon" href="../fav/safari-pinned-tab.svg" color="#5bbad5">
    <meta name="msapplication-TileColor" content="#da532c">
    <meta name="theme-color" content="#ffffff">

    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <link href="https://cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet">
    <script defer src=".././menu.js"></script>
    <script src="https://cdn.tailwindcss.com"></script>
    <title>TC Admin: Chromebook Inventory</title>
    <link rel="icon" type="image/png" sizes="32x32" href="../fav/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="../fav/favicon-16x16.png">
</head>
<body class="bg-slate-800 h-screen flex">

    <!-- Left Side Menu -->
    <div class="w-1/6 bg-slate-950 text-white p-4 text-center">
        <img src="../img/tc-logo.png" style="width: 90%; height: auto; margin-bottom: 20px; padding: 1rem;">
        <ul id="menu">
            
        </ul>
    </div>

    <!-- Main Content -->
    <div class="flex-1 p-8">
       <div class="max-w-full w-full bg-white p-8 rounded shadow-md">
    <div class="flex items-center justify-between mb-4">
        <!-- Password Manager Passwords text -->
        <h1 class="text-2xl font-bold mb-4">Chromebook Inventory</h1>

        <!-- Search Box and Add New Password Button Container -->
        <div class="flex items-center">
            <!-- Search Box -->
            <div class="flex items-center">
                <input type="text" id="search" placeholder="Search..." class="bg-gray-100 border border-gray-300 px-4 py-2 rounded-l-md focus:outline-none focus:ring-blue-500 focus:border-blue-500">
            </div>
            
            <!-- Add New Password Button -->
            <button class="bg-blue-500 text-white px-4 py-2 rounded-md ml-4" onclick="AddModal()"><i class="fa-solid fa-plus"></i> Add</button>
            
        </div>
    </div>

    <!-- Table -->
    <table class="w-full border-collapse border border-gray-800">
        <thead>
            <tr class="bg-gray-800 text-white">
                <th class="py-2 px-4 border">Make</th>
                <th class="py-2 px-4 border">Model</th>
                <th class="py-2 px-4 border">Screen Size</th>
                <th class="py-2 px-4 border">Serial Number</th>
                <th class="py-2 px-4 border">Tag</th>
                <th class="py-2 px-4 border">Cost</th>
                <th class="py-2 px-4 border">Updates</th>
                <th class="py-2 px-4 border">Building</th>
                <th class="py-2 px-4 border">Device Status</th>
            </tr>
        </thead>
        <tbody class="text-center" id="password-table">
           
        </tbody>
    </table>
</div>
 


    <div id="add-modal" class="fixed top-0 left-0 w-full h-full bg-gray-800 bg-opacity-50 hidden" onclick="event.stopPropagation()">
    <div class="wpc tab-width mx-auto mt-2 bg-white p-8 rounded shadow-md">
        <div class="tabs">
            <button class="tablink p-2 ml-2 active" onclick="openTab('tab1')">Chromebook Details</button>
            <button class="tablink p-2" onclick="openTab('tab2')">Chromebook Repairs</button>
            <button class="tablink p-2" onclick="openTab('tab3')" id="tab3-btn">Chromebook History</button>
        </div>
        <div id="tab1" class="tabcontent">
            <div class="wpc mx-auto mt-1 bg-white p-8 rounded">
            <h2 class="text-2xl font-bold  text-center">Add New Chromebook</h2>
            
               <div class="mb-2">
                        <label for="modal-model" class="block text-gray-600 text-sm font-medium mb-2">Make & Model</label>
                        <select name="modal-model" id="modal-model-add" class="w-full px-3 py-2 border rounded-md focus:outline-none focus:border-blue-500"></select>
                    </div>

                <div class="mb-2">
                    <label for="modal-sn" class="block text-gray-600 text-sm font-medium mb-2">Serial Number</label>
                    <input type="text" id="modal-sn-add" name="modal-sn" class="w-full px-3 py-2 border rounded-md focus:outline-none focus:border-blue-500" required>
                </div>

                <div class="mb-2">
                    <label for="modal-tag" class="block text-gray-600 text-sm font-medium mb-2">Asset Tag</label>
                    <input type="text" id="modal-tag-add" name="modal-tag" class="w-full px-3 py-2 border rounded-md focus:outline-none focus:border-blue-500" required>
                </div>

                <div class="mb-2">
                    <label for="modal-tag" class="block text-gray-600 text-sm font-medium mb-2">Date Added</label>
                    <input type="date" id="modal-date-add" name="modal-tag" class="w-full px-3 py-2 border rounded-md focus:outline-none focus:border-blue-500" required>
                </div>

                <div class="mb-2 ">
                        <label for="modal-year" class="block text-gray-600 text-sm font-medium mb-2">Graduation Year</label>
                        <select name="modal-year" onchange="getStudents(this.value)" id="modal-year-add" class="w-full px-3 py-2 border rounded-md focus:outline-none focus:border-blue-500"></select>
                    </div>

                    <div class="mb-2">
                        <label for="modal-student" class="block text-gray-600 text-sm font-medium mb-2">Student Name</label>
                        <select name="modal-student" oninput="AssignStudent()" id="modal-student-add" onmousedown="if(this.options.length>6){this.size=6;}"  onchange='this.size=0;' onblur="this.size=0;"  class="w-full px-3 py-2 border rounded-md focus:outline-none focus:border-blue-500"></select>
                    </div>


                <div class="mb-4">
                        <label for="modal-building" class="block text-gray-600 text-sm font-medium mb-2">Building Locations</label>
                        <select name="modal-building" id="modal-building-add" class="w-full px-3 py-2 border rounded-md focus:outline-none focus:border-blue-500"></select>
                </div>
                <!-- Save Button -->
               <div class="grid grid-flow-col justify-stretch">
                <button type="button" onclick="addChromebook()" id="add-btn" class="w-half bg-green-500 text-white p-1 mr-3 rounded-md hover:bg-blue-600">Add Chromebook</button>
                <button type="button" onclick="editChromebook()" id="edit-btn" class="w-half bg-green-500 text-white p-1 mr-3 rounded-md hover:bg-blue-600 hidden">Update</button>
                <button type="button" onclick="deleteChromebook()" id="del-btn" class="w-half bg-red-500 text-white p-1 mr-3 rounded-md hover:bg-red-600 hidden">Delete</button>
                <button type="button" onclick="AddModalClose()" class="w-half bg-blue-500 text-white p-2 rounded-md hover:bg-blue-600">Close</button>
           
               </div>
        </div>


        </div>
        <div id="tab2" class="tabcontent" style="display: none;">
            <h2 class="text-2xl font-bold  text-center">Chromebook Repairs</h2>
            <div class="grid grid-cols-2 flex-grow">
                <div class="col-span-1" id="repair">
                    
                    <div class="mb-2 p-2 mr-8">
                        <label for="modal-repairReason" class="block text-gray-600 text-sm font-medium">Repair Reasons</label>
                        <select name="modal-repairReason" id="modal-repairReason-add" class="w-full py-2 border rounded-md focus:outline-none focus:border-blue-500"></select>
                    </div>

                    <div class="mb-2 p-2 mr-8">
                        <label for="modal-returnSchool" class="block text-gray-600 text-sm font-medium">Return School</label>
                        <select name="modal-returnSchool" id="modal-returnSchool-add" class="w-full py-2 border rounded-md focus:outline-none focus:border-blue-500"></select>
                    </div>

                    <div class="mb-2 p-2 mr-8">
                        <label for="comment" class="block text-gray-600 text-sm font-medium">Comment</label>
                        <input id="comment" name="comment" class="w-full px-1 py-2 border rounded-md focus:outline-none focus:border-blue-500" placeholder="Additional Comments"></input>
                    </div>

                </div>
                
                <div class="mb-2">
                    <label for="explaination" class="block text-gray-600 text-sm font-medium mt-6">Reason for repair</label>
                    <textarea id="explaination" rows="20" cols="30" name="explaination" class="w-full px-3 py-2 border rounded-md" placeholder="Explaination of Damages"></textarea>
                </div>
            </div>
            <div class="grid grid-flow-col justify-stretch">
                <button type="button" onclick="sendChromebook()" id="send-repair" class="w-half bg-red-500 text-white p-1 m-3 rounded-md hover:bg-red-800 hidden">Submit Repair</button>
                <button type="button" onclick="returnChromebook()" id="close-repair" class="w-half bg-green-500 text-white p-1 m-3 rounded-md hover:bg-green-800 hidden">Returned from Repair</button>
            </div>
        </div>
        <div id="tab3" class="tabcontent p-4" style="display: none; overflow-y: auto; max-height: 300px;">
    <table class="w-full border-collapse">
        <thead>
            <tr class="orange-background text-white">
                <th class="py-2 px-4 border">Action</th>
                <th class="py-2 px-4 border">Date</th>
                <th class="py-2 px-4 border">Details</th>
            </tr>
        </thead>
        <tbody class="text-center border-collapse" id="repair-table">
            <!-- Table content goes here -->
        </tbody>
    </table>
</div>

    </div>
</div>

    <script defer>
        let addModal = document.getElementById('add-modal')
        let addmake = document.getElementById('modal-model-add')
        let addSN = document.getElementById('modal-sn-add')
        let addtag = document.getElementById('modal-tag-add')
        let addBuilding = document.getElementById('modal-building-add')
        let addRoom = document.getElementById('modal-room-add')
        let addDate = document.getElementById('modal-date-add')
        let addYear = document.getElementById('modal-year-add')
        let addStudent = document.getElementById('modal-student-add')
        let addBtn = document.getElementById('add-btn')
        let editBtn = document.getElementById('edit-btn')
        let delBtn = document.getElementById('del-btn')
        let repairText = document.getElementById('explaination')
        let sendBtn = document.getElementById('send-repair')
        let returnBtn = document.getElementById('close-repair')
        let repairReason = document.getElementById('modal-repairReason-add')
        let returnSchool = document.getElementById('modal-returnSchool-add')
        let commentBox = document.getElementById('comment')
        let deviceStatus = '';

        const currentDate = new Date();
        const year = currentDate.getFullYear();
        const month = currentDate.getMonth() + 1; // Months are zero-based (0 = January)
        const day = currentDate.getDate();
        const formattedDate = `${year}-${month < 10 ? '0' : ''}${month}-${day < 10 ? '0' : ''}${day}`;
        addDate.value = formattedDate; 
        let editID = 0
        let repairStatus = 0
        let searchBox = document.getElementById('search')
        let tabModal = document.getElementById('tab-modal')

        function openTab(tabName) {
            var i, tabcontent, tablinks;
            tabcontent = document.getElementsByClassName("tabcontent");
            for (i = 0; i < tabcontent.length; i++) {
                tabcontent[i].style.display = "none";
            }
            tablinks = document.getElementsByClassName("tablink");
            for (i = 0; i < tablinks.length; i++) {
                tablinks[i].className = tablinks[i].className.replace(" active", "");
            }
            document.getElementById(tabName).style.display = "block";
            event.currentTarget.className += " active";

            getRepairInfo(deviceStatus);
        }
       

        function getChromebook() {
            document.getElementById('password-table').innerHTML = ''
            fetch(`/chromebook/list`)
            .then(response => response.json())
            .then(data => {
                data.forEach(obj => {
                    function buildingColor(building) {
                        if(building == 'DAC') {
                            return 'bg-green-400'
                        }

                        if(building == 'NS') {
                            return 'bg-yellow-400'
                        }

                        if(building == 'PS') {
                            return 'bg-red-400'
                        }

                        if(building == 'ABE') {
                            return 'bg-lime-400'
                        }

                        if(building == 'MHS') {
                            return 'bg-blue-400'
                        }

                        if(building == 'MMS') {
                            return 'bg-orange-400'
                        }
                        
                        if(building == 'N/A') {
                            return 'bg-gray-400'
                        }
                    }
                    let row = `
                        <tr class="hover:bg-blue-400 ${buildingColor(obj.building)}" onclick="EditModal('${obj.id}')">
                        <td class="py-2 px-4 border">${obj.make}</td>
                        <td class="py-2 px-4 border">${obj.model}</td>
                        <td class="py-2 px-4 border">${obj.screen} inch</td>
                        <td class="py-2 px-4 border">${obj.sn}</td>
                        <td class="py-2 px-4 border">${obj.tag}</td>
                        <td class="py-2 px-4 border">$${obj.cost}</td>
                        <td class="py-2 px-4 border">${obj.updates}</td>
                        <td class="py-2 px-4 border">${obj.building}</td>
                        <td class="py-2 px-4 border">${obj.device_status}</td>
                         </tr>`;
                    document.getElementById('password-table').innerHTML += row;
                });
        })

        }

        function AddModal() {
            addModal.classList.remove('hidden')
            addDate.value = formattedDate
            addBuilding.selectedIndex = 0
            addmake.selectedIndex = 0
        }

        function EditModal(id) {
            addModal.classList.remove('hidden')
            editID = id
            addBtn.classList.add('hidden')
            editBtn.classList.remove('hidden')
            delBtn.classList.remove('hidden')
            addBuilding.selectedIndex = -1
            addStudent.selectedIndex = 0
            chromebookLog(editID)
            fetch(`/chromebook/chromebook?id=${editID}`)
            .then(response => response.json())
            .then(data => {
                    let obj = data[0]
                    deviceStatus = data[0].device_status;
                    addSN.value = obj.sn
                    addtag.value = obj.tag
                    addDate.value = obj.date_added

                    var selectModel = addmake; 
                    for (var i = 0; i < selectModel.options.length; i++) {
                        var option = selectModel.options[i];
                        if (option.value === obj.model_id) {
                            option.selected = true;
                            break;
                        }   
                    }

                    var selectModel = addBuilding; 
                    for (var i = 0; i < selectModel.options.length; i++) {
                        var option = selectModel.options[i];
                        if (option.value === obj.building) {
                            option.selected = true;
                            break;
                        }   
                    }

                    var selectModel = addYear; 
                    for (var i = 0; i < selectModel.options.length; i++) {
                        var option = selectModel.options[i];
                        if (option.value === obj.student_year) {
                            option.selected = true;
                            break;
                        }   
                    }

                   getStudentDetails(obj.student_year, obj.student)
                    if(obj.device_status == "In Use") {
                        sendBtn.classList.remove('hidden')
                        returnBtn.classList.add('hidden')
                        return
                    } 
                    
                    if(obj.device_status == "Out for Repair") {
                        sendBtn.classList.add('hidden')
                        returnBtn.classList.remove('hidden')
                        return
                    }

                });  
        }

        function AddModalClose() {
            if(editBtn == 0) {
                addModal.classList.add('hidden')
                addtag.value = ''
                addSN.value = ''
            }else {
                addModal.classList.add('hidden')
                addBtn.classList.remove('hidden')
                editBtn.classList.add('hidden')
                delBtn.classList.add('hidden')
                addtag.value = ''
                addSN.value = ''
                editID = 0
            }

            if(repairStatus == 1) {
                returnBtn.classList.add('hidden')
            } else if(repairStatus == 2) {
                sendBtn.classList.add('hidden')
            }
            repairText.value = ""
            repairStatus = 0            
            getChromebook();
        }

        function getBuildings() {
                    addBuilding.innerHTML = ``
                    addBuilding.innerHTML += `<option value="" >Select A Building</option>`
                    
                    fetch('/ap/buildings')
                    .then(response => response.json())
                    .then(data => {
                        //console.log(data)
                            for(let i = 0; i<data.length; i++) {
                                let obj = data[i]
                                addBuilding.innerHTML += `<option value="${obj.name}">${obj.name}</option>`
                                
                            }
                        });     
                }

        function getYear() {
                    addYear.innerHTML = ``
                    addYear.innerHTML += `<option value="" >Select Graduation Year</option>`
                    
                    fetch(`/chromebook/years`)
                    .then(response => response.json())
                    .then(data => {
                        //console.log(data)
                            for(let i = 0; i<data.length; i++) {
                                let obj = data[i]
                                addYear.innerHTML += `<option value="${obj.year}">${obj.year}</option>`
                            }
                        });     
            }

        function getStudents() {
                    addStudent.innerHTML = ``
                    addStudent.innerHTML += `<option value="" >Select Student Name</option>`
                    //console.log(addYear.value)
                    fetch(`/chromebook/students?id=${addYear.value}`)
                    .then(response => response.json())
                    .then(data => {
                        //console.log(data)
                            for(let i = 0; i<data.length; i++) {
                                let obj = data[i]
                                addStudent.innerHTML += `<option value="${obj.student}">${obj.student}</option>`
                            }
                        });   

            }

        function getStudentDetails(year, name) {
            // Assuming addStudent and addYear are properly defined and refer to the correct DOM elements
            addStudent.innerHTML = ''; // Clear the dropdown before populating it
            addStudent.innerHTML += '<option value="">Select Student Name</option>';

            fetch(`/chromebook/students?id=${year}`)
                .then(response => response.json())
                .then(data => {
                    data.forEach(obj => {
                        addStudent.innerHTML += `<option value="${obj.student}">${obj.student}</option>`;
                    });

                    // Now that the dropdown is populated, select the desired student if found
                    var selectModel = addStudent;
                    for (var i = 0; i < selectModel.options.length; i++) {
                        var option = selectModel.options[i];
                        if (option.value === name) {
                            option.selected = true;
                            break;
                        }
                    }
                })
                .catch(error => {
                    console.error('Error fetching student data:', error);
                });
        }

        function getMakeModel() {
                    addmake.innerHTML = ``
                    addmake.innerHTML += `<option value="" >Select Chromebook Make & Model</option>`
                    
                    fetch(`/chromebook/makes`)
                    .then(response => response.json())
                    .then(data => {
                        //console.log(data)
                            for(let i = 0; i<data.length; i++) {
                                let obj = data[i]
                                addmake.innerHTML += `<option value="${obj.id}">${obj.make} ${obj.model}</option>`
                            }
                        });     
            }
        
        function addChromebook() {
            if(addmake.value == '') {
                alert('Select a Make & Model')
                return
            }
            if(addSN.value == '') {
                alert('Enter a Serial Number')
                return
            }
            if(addBuilding.value == '') {
                alert('Select a building')
                return
            }

             let data = {
                    model_id: addmake.value,
                    sn: addSN.value,
                    tag: addtag.value,
                    building: addBuilding.value,
                    date_added: addDate.value,
                    student : addStudent.value,
                    student_year : addYear.value, 
                    status: 'true',
                    device_status : 'In Use'
                }
                
                fetch(`/chromebook/chromebook`, { 
                method: 'Put',
                body : JSON.stringify(data),
                headers: {"Content-Type": "application/json",}
                })
                .then(response => response.text())
                .then(data => {
                    if(data == 'added') {
                        addSN.value = ''
                        addtag.value = ''
                        addModal.classList.add('hidden')
                        //showNotification('Computer was updated!', 'bg-orange-700')
                        AddModalClose()
                        getChromebook()
                    }
                });
        }

        function editChromebook() {
            if(addmake.value == '') {
                alert('Select a Make & Model')
                return
            }
            if(addSN.value == '') {
                alert('Enter a Serial Number')
                return
            }
            if(addBuilding.value == '') {
                alert('Select a building')
                return
            }

             let data = {
                    model_id: addmake.value,
                    sn: addSN.value,
                    tag: addtag.value,
                    building: addBuilding.value,
                    status: 'true',
                }
                
                fetch(`/chromebook/chromebook?id=${editID}`, {
                method: 'Post',
                body : JSON.stringify(data),
                headers: {"Content-Type": "application/json",}
                })
                .then(response => response.text())
                .then(data => {
                    if(data == 'updated') {
                        addSN.value = ''
                        addtag.value = ''
                        addModal.classList.add('hidden')
                        //showNotification('Computer was updated!', 'bg-orange-700')
                        AddModalClose()
                        getChromebook()
                    }
                });
                getRepairInfo(obj.device_status);
        }
        
        function deleteChromebook() {
            var answer = prompt(`Do you want to delete this Chromebook? (yes/no)`);
            if (answer === "yes") {
                fetch(`/chromebook/chromebook?id=${editID}`, {method : 'delete'})
                .then(response => response.text())
                .then(data => {
                    if(data == 'deleted') {
                        alert(`This chromebook was deleted`)
                        AddModalClose()
                        getChromebook()
                    }
                });
            } else if (answer === "no") {
                getChromebook()
            } else {
                 getChromebook()
            }
        }

        searchBox.addEventListener("input", () => {
             document.getElementById('password-table').innerHTML = ''
            if(searchBox.length = 0) {
                getChromebook()
                return
            } else {
                
            fetch(`/chromebook/search?search=${searchBox.value}`)
            .then(response => response.json())
            .then(data => {
               
                for(let i = 0; i<data.length; i++) {
                    let obj =data[i];

                    function buildingColor(building) {
                        if(building == 'DAC') {
                            return 'bg-green-400'
                        }

                        if(building == 'NS') {
                            return 'bg-yellow-400'
                        }

                        if(building == 'PS') {
                            return 'bg-red-400'
                        }

                        if(building == 'ABE') {
                            return 'bg-lime-400'
                        }

                        if(building == 'MHS') {
                            return 'bg-blue-400'
                        }

                        if(building == 'MMS') {
                            return 'bg-orange-400'
                        }
                    }
                    
                    let row = `
                        <tr class="hover:bg-blue-400 ${buildingColor(obj.building)}" onclick="EditModal('${obj.id}')">
                        <td class="py-2 px-4 border">${obj.make}</td>
                        <td class="py-2 px-4 border">${obj.model}</td>
                        <td class="py-2 px-4 border">${obj.screen} inch</td>
                        <td class="py-2 px-4 border">${obj.sn}</td>
                        <td class="py-2 px-4 border">${obj.tag}</td>
                        <td class="py-2 px-4 border">$${obj.cost}</td>
                        <td class="py-2 px-4 border">${obj.updates}</td>
                        <td class="py-2 px-4 border">${obj.building}</td>
                        <td class="py-2 px-4 border">${obj.device_status}</td>
                        
                        
                         </tr>`;
                    document.getElementById('password-table').innerHTML += row;
                



                }
            })
            }
        })

        function chromebookLog(id) {
                    document.getElementById('repair-table').innerHTML = '';
                    fetch(`/chromebook/log?id=${id}`)
                    .then(response => response.json())
                    .then(data => {
                        //console.log(data)
                            for(let i = 0; i<data.length; i++) {
                                let obj = data[i]
                                let row = `
                                        <tr class="hover:bg-blue-400">
                                        <td class="py-2 px-4 border">${obj.action}</td>
                                        <td class="py-2 px-4 border">${obj.date}</td>
                                        <td class="py-2 px-4 border">${obj.log}</td>
                                        
                                        </tr>`;
                                    document.getElementById('repair-table').innerHTML += row;
                            }
                        });   
        }

        function AssignStudent() {

             let data = {
                    student : addStudent.value,
                    student_year : addYear.value, 
                }
            fetch(`/chromebook/student?id=${editID}`, {
                method: 'Post',
                body : JSON.stringify(data),
                headers: {"Content-Type": "application/json",}
                })
                .then(response => response.text())
                .then(data => {
                    if(data == 'updated') {
                        logChomebook(editID, 'Assigned to Student', `Assigned to ${addStudent.value}.`)
                    }
                });
        }

        function logChomebook(id, action, info) {
            let data = {
                    chromebook_id: id,
                    action: action,
                    log: info,
                    date: addDate.value,
                }
                
                fetch(`/chromebook/log`, {
                method: 'Put',
                body : JSON.stringify(data),
                headers: {"Content-Type": "application/json",}
                })
                .then(response => response.text())
                .then(data => {
                    if(data == 'added') {
                       chromebookLog(id)
                    }
                });

        }

        async function sendChromebook() {
            //Connect to submit repair API endpoints.
            var reasonLong = repairReason.options[repairReason.selectedIndex].text;
            var reason = repairReason.value;
            var schoolName = returnSchool.options[returnSchool.selectedIndex].text;
            var school = returnSchool.value;
            var serial = addSN.value;
            var explaination = repairText.value;
            var comment = commentBox.value;
            var ticketNumber = "";

            if(commentBox.value == '') {
                comment = reasonLong;
            }

            let data = {
                serial,
                school,
                reasonLong,
                reason,
                comment,
                explaination,
                schoolName,
                
            }

            await fetch(`/submitRepair/sendRepair`, {
                method: 'Post',
                body : JSON.stringify(data),
                headers: {"Content-Type": "application/json",}
                })
                .then(response => response.text())
                .then(data => {
                    console.log(data);
                    if(data.status === "success") {
                        alert("ERROR! Look at console for detailed error message.");
                        console.log(data);
                    } else {
                        alert("Ticket Submitted Successfully!");
                        ticketNumber = data.ticketNumber;
                    }
                });

            //Log that the chromebook was sent for repair
            fetch(`/chromebook/repair?id=${editID}`, {method: 'Put'})
                .then(response => response.text())
                .then(data => {
                    if(data == 'updated') {
                        logChomebook(editID, 'Sent For Repair', ticketNumber)
                        document.getElementById('repair-table').innerHTML = '';
                        sendBtn.classList.add('hidden')
                        returnBtn.classList.remove('hidden')
                        repairText.value = ''
                        repairStatus = 1
                        document.getElementById('tab3-btn').click()
                    }
                });
                
        }

        function returnChromebook() {
            let serial = addSN.value;
            fetch(`/chromebook/repair?id=${editID}`, {method: 'Post'})
                .then(response => response.text())
                .then(data => {
                    if(data == 'updated') {
                        logChomebook(editID, 'Returned From Repair', "This chromebook was returned from repair")
                        document.getElementById('repair-table').innerHTML = '';
                        //chromebookLog(editID)
                        //repairText.readonly = 'true'
                        sendBtn.classList.remove('hidden')
                        returnBtn.classList.add('hidden')
                        repairStatus = 2
                        document.getElementById('tab3-btn').click()
                    }
                });

            fetch(`/chromebook/return?serial=${serial}`, {method: 'PUT'})
            .then(response => response.text())
            .then(data => {
                //console.log("Updated: " + serial);
            });
        }

        function getRepairReasons(){
            repairReason.innerHTML = ``
            repairReason.innerHTML += `<option value="" >Select Repair Reason</option>`

            let reasons = fetch(`/submitRepair/repairReasons`)
            .then(response => response.json())
            .then(data => {
                for(let i = 0; i<data.length; i++) {
                    let obj = data[i]
                    repairReason.innerHTML += `<option value="${obj.value}">${obj.reason}</option>`
                    }
                });     
        }

        function getReturnSchools() {
            returnSchool.innerHTML = ``
            returnSchool.innerHTML += `<option value="" >Select Return School</option>`

            let reasons = fetch(`/submitRepair/returnSchools`)
            .then(response => response.json())
            .then(data => {
                for(let i = 0; i<data.length; i++) {
                    let obj = data[i]
                    returnSchool.innerHTML += `<option value="${obj.building_code}">${obj.name}</option>`
                    }
                });     
        }

        async function getRepairInfo(repairStatus) {
            let serial = addSN.value;
            
            if(repairStatus == "Out for Repair") {
                await fetch(`/submitRepair/repairInfo?serial=${serial}`, {method: 'Get'})
                .then(response => response.json())
                .then(data => {
                    repairReason.innerHTML = `<option value="${data[0].reason}">${data[0].reasonLong}</option>`
                    returnSchool.innerHTML = `<option value="${data[0].school}">${data[0].schoolName}</option>`
                    commentBox.value = data[0].comment;
                    explaination.value = data[0].explaination;
                    explaination.ariaReadOnly = true;
                    commentBox.ariaReadOnly = true;
                    repairReason.ariaReadOnly = true;
                    returnSchool.ariaReadOnly = true;
                })
            } else {
                getRepairReasons();
                getReturnSchools();
            }
        }

        getMakeModel()
        getBuildings()
        getChromebook()
        getYear()

    </script>

</body>
</html>
