<!DOCTYPE html>
<html lang="en">
<head>
    <style>
        /* You may adjust these values as needed */
        .w-85 {
            width: 75%;
        }

        .h-70 {
            height: 75%;
        }
        #modal {
            align-items: center;
            justify-content: center;
        }

        .modal-btn {
            position: absolute;
            left: 50%;
            transform: translate(45%);
        }

        .ql-editor {
            min-height: 96px;
            max-height: 150px;
            overflow-y: auto;
        }

        .ql-editor {
            margin-bottom: 10px;
        }

    </style>

    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <link href="https://cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet">
   <script defer src=".././menu.js"></script>
    <script src="https://cdn.tailwindcss.com"></script>
    <title>Password Manager</title>
    <link rel="icon" type="image/png" sizes="32x32" href="../fav/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="../fav/favicon-16x16.png">
</head>
<body class="bg-slate-800 h-screen flex">

    <!-- Left Side Menu -->
    <div class="w-1/6 bg-slate-950 text-white p-4 text-center">
        <img src="./img/tc-logo.png" style="width: 90%; height: auto; margin-bottom: 20px; padding: 1rem;">
        <ul id="menu">
           
        </ul>
    </div>

    <!-- Main Content -->
    <div class="flex-1 p-8">
       <div class="max-w-full w-full bg-white p-8 rounded shadow-md">
    <div class="flex items-center justify-between mb-4">
        <!-- Password Manager Passwords text -->
        <h1 class="text-2xl font-bold mb-4">Password Manager</h1>

        <!-- Search Box and Add New Password Button Container -->
        <div class="flex items-center">
            <!-- Search Box -->
            <div class="flex items-center">
                <input type="text" id="search" placeholder="Search..." class="bg-gray-100 border border-gray-300 px-4 py-2 rounded-l-md focus:outline-none focus:ring-blue-500 focus:border-blue-500">
            </div>
            
            <!-- Add New Password Button -->
            <button class="bg-blue-500 text-white px-4 py-2 rounded-md ml-4" onclick="AddPassModal()"><i class="fa-solid fa-plus"></i> Add</button>
        </div>
    </div>

    <!-- Table -->
    <table class="w-full border-collapse border border-gray-800">
        <thead>
            <tr class="bg-gray-800 text-white">
                <th class="py-2 px-4 border">Service</th>
                <th class="py-2 px-4 border">URL</th>
                <th class="py-2 px-4 border">Username</th>
                <th class="py-2 px-4 border">Category</th>
                <th class="py-2 px-4 border">Last Updated</th>
            </tr>
        </thead>
        <tbody class="text-center" id="password-table">
           
        </tbody>
    </table>
</div>
 

    <!-- Modal -->
    <div id="modal" class="fixed top-0 left-0 w-full h-full flex items-center justify-center bg-gray-800 bg-opacity-50 hidden" onclick="event.stopPropagation()">
    <div class="relative w-85 h-70 bg-white rounded shadow-md flex flex-col">
        <div class="grid grid-cols-2 flex-grow">
            <div class="col-span-1 bg-white p-8 rounded-l">
                
                    <!-- Website/Service -->
                    <div class="mb-4">
                        <label for="modal-website" class="block text-gray-600 text-sm font-medium mb-2">Website/Service</label>
                        <input type="text" id="modal-website" name="modal-website" class="w-full px-3 py-2 border rounded-md focus:outline-none focus:border-blue-500" >
                    </div>
                    <!-- URL -->
                    <div class="mb-4">
                        <label for="modal-url" class="block text-gray-600 text-sm font-medium mb-2">URL</label>
                        <input type="text" id="modal-url" name="modal-url" class="w-full px-3 py-2 border rounded-md focus:outline-none focus:border-blue-500" >
                    </div>

                    <!-- Username/Email -->
                    <div class="mb-4">
                        <label for="modal-username" class="block text-gray-600 text-sm font-medium mb-2">Username/Email</label>
                        <input type="text" id="modal-username" name="modal-username" class="w-full px-3 py-2 border rounded-md focus:outline-none focus:border-blue-500" >
                    </div>

                    <!-- Password -->
                   <div class="mb-4 flex justify-between">
                        <div class="w-half relative">
                            <label for="modal-password" class="block text-gray-600 text-sm font-medium mb-2">Password</label>
                            <input type="password" id="modal-password" name="modal-password" class="w-full px-3 py-2 border rounded-md focus:outline-none focus:border-blue-500 " >
                            <button type="button"  class="absolute top-1/2 right-2 transform -translate-y-1/2 pass-btn mt-3" onclick="togglePasswordVisibility(event)">
                                <i id="modal-eye-icon" class="fas fa-eye"></i>
                            </button>
                            <button type="button" id="modal-copy-btn" class="absolute top-1/2 right-8 transform -translate-y-1/2 pass-btn mt-3" onclick="copyToClipboard(event)">
                                <i class="far fa-copy"></i>
                            </button>
                        </div>
                        <div class="w-half relative">
                            <label for="modal-otp" class="block text-gray-600 text-sm font-medium mb-2">OTP</label>
                            <input type="text" id="modal-otp" name="modal-otp" class="w-full px-3 py-2 border rounded-md focus:outline-none focus:border-blue-500 "> 
                        </div>
                    </div>

                    <!-- Last Updated -->
                    <div class="mb-6">
                        <label for="modal-last-updated" class="block text-gray-600 text-sm font-medium mb-2">Last Updated</label>
                        <input type="text" id="modal-last-updated" name="modal-last-updated" class="w-full px-3 py-2 border rounded-md focus:outline-none focus:border-blue-500" >

                        <label for="network-cat" class="block text-gray-600 text-sm font-medium mb-2">Password Category</label>
                        <select name="network-cat" id="network-cat" class="w-full px-3 py-2 border rounded-md focus:outline-none focus:border-blue-500">
                              
                        </select>
                    </div>

                    <!-- Information -->
                    <div class="mb-4">
                        </div>

                    <!-- Save Button -->
                    {{!-- <button type="button" id="addPassword" onclick="AddPass();" class="w-full bg-blue-500 text-white p-2 rounded-md hover:bg-blue-600 mb-4 hidden">Add Password</button>
                    <button type="button" id="close" onclick="closeModal()" class="w-full bg-red-500 text-white p-2 rounded-md hover:bg-red-600">Close</button>
                </form> --}}
            </div>
            <div class="col-span-1 p-4 mb-4 rounded-r">
                <h2 class="text-2xl font-bold mb-4">Information</h2>
                
                {{!-- <div id="editor" class="w-full max-h-96 px-3 py-2 border rounded-md focus:outline-none focus:border-blue-500 border-gray-700">

                    <p>Hello World!</p>
                    <p>Some initial <strong>bold</strong> text</p>
                    <p><br></p> 

                </div> --}}
                    
                <div id="editor" class="w-full max-h-96 px-3 py-2 border rounded-md focus:outline-none focus:border-blue-500 border-gray-700">
                    
                </div>

                 <div class="modal-btn mt-6">
                    
                <button type="button" id="modal-add" class="w-full bg-green-500 text-white p-2 rounded-md hover:bg-green-700 mb-4 hidden" onclick="AddPass() ">Add Password</button>
                 <button type="button" id="modal-save" class="w-full bg-orange-500 text-white p-2 rounded-md hover:bg-orange-700 mb-4 hidden" onclick="EditPass()">Save This Password</button>
                 </div>
            </div>
        </div>
        <button class="absolute top-4 right-4 text-gray-600" onclick="closeModal()">
            <i class="fas fa-times"></i>
        </button>
    </div>
</div>

     <script src="https://cdn.quilljs.com/1.3.6/quill.js"></script>
    <script src="https://unpkg.com/quill-html-edit-button@2.2.7/dist/quill.htmlEditButton.min.js"></script>
    
    <script>
        const dateString = new Date().toDateString();
        let passid = 0;
        let infoEditor;
        let timeCodeRefreshInterval;
        var passwordInput = document.getElementById('modal-password');
        var eyeIcon = document.getElementById('modal-eye-icon');
        let timerMode = false
        
       var toolbarOptions = [
        ['bold', 'italic', 'underline', 'strike'],        // toggled buttons
        ['code-block'],

        [{ 'header': 1 }, { 'header': 2 }],               // custom button values
        [{ 'list': 'ordered'}, { 'list': 'bullet' }],
        [{ 'indent': '-1'}, { 'indent': '+1' }],          // outdent/indent
        [ 'link', 'image', 'video', 'formula' ],  
        [{ 'color': [] }, { 'background': [] }],          // dropdown with defaults from theme
        [{ 'align': [] }],

        ];
        Quill.register("modules/htmlEditButton", htmlEditButton);
        var quill = new Quill('#editor', {
        modules: {
            toolbar: toolbarOptions,
            htmlEditButton: {
            debug: true, // logging, default:false
            msg: "Edit the content in HTML format", //Custom message to display in the editor, default: Edit HTML here, when you click "OK" the quill editor's contents will be replaced
            okText: "Ok", // Text to display in the OK button, default: Ok,
            cancelText: "Cancel", // Text to display in the cancel button, default: Cancel
            buttonHTML: "&lt;&gt;", // Text to display in the toolbar button, default: <>
            buttonTitle: "Show HTML source", // Text to display as the tooltip for the toolbar button, default: Show HTML source
            syntax: false, // Show the HTML with syntax highlighting. Requires highlightjs on window.hljs (similar to Quill itself), default: false
            prependSelector: 'div#myelement', // a string used to select where you want to insert the overlayContainer, default: null (appends to body),
            editorModules: {} // The default mod
            }
        },
        theme: 'snow'
        });

        function openModal(id) {
            
            fetch(`/passwords/password-list?id=${id}`,{ method: 'post'})
  		    .then(response => response.json())
            .then(data => {
                   {{!-- console.log(data[0].info) --}}
                    document.getElementById('modal-website').value = data[0].service;
                    document.getElementById('modal-username').value = data[0].username;
                    document.getElementById('modal-url').value = data[0].url;
                    document.getElementById('modal-last-updated').value = data[0].updated;
                    quill.setContents(quill.clipboard.convert(data[0].info))
                    document.getElementById('modal').style.display = 'flex';
                    passid = id;

                    var selectElement = document.getElementById("network-cat"); 
                    for (var i = 0; i < selectElement.options.length; i++) {
                        var option = selectElement.options[i];
                        if (option.value === data[0].category) {
                            option.selected = true;
                            break;
                        }
                    }
                });
        }

        function AddPassModal() {
            document.getElementById('modal-website').focus();
            document.getElementById('modal-eye-icon').style.display = "none";
            document.getElementById('modal-password').type = 'text';
            document.getElementById('modal-copy-btn').style.display = "none";
            document.getElementById('modal-add').classList.remove('hidden')
            document.getElementById('modal').style.display = 'flex';
        }

        function AddPass() {
            function otp() {
                if(document.getElementById('modal-otp').length == 0) {
                    return "none"
                }else {
                    return document.getElementById('modal-otp').value
                }
            }

            let data = {
                service : document.getElementById('modal-website').value,
                url : document.getElementById('modal-url').value,
                username : document.getElementById('modal-username').value,
                password : document.getElementById('modal-password').value,
                otp : otp(),
                category : document.getElementById('network-cat').value,
                updated : dateString,
                view : 'True',
                info : quill.root.innerHTML
            }

            fetch('/passwords/password',{
                method: 'Post',
                body : JSON.stringify(data),
                headers: {
                    "Content-Type": "application/json",
                    },
            })
  		    .then(response => response.json())
            .then(data => {
                    if(data.affectedRows == 1) {
                        closeModal();
                    } else {
                        alert("Error: Password not added!!!");
                    }
                });
        }

        function EditPass() {
           
            let data = {
                id : passid,
                service : document.getElementById('modal-website').value,
                url : document.getElementById('modal-url').value,
                username : document.getElementById('modal-username').value,
                password : document.getElementById('modal-password').value,
                category : document.getElementById('network-cat').value,
                updated : dateString,
                view : 'True',
                info : quill.root.innerHTML
            }

            fetch('/passwords/password-update',{
                method: 'post',
                body : JSON.stringify(data),
                headers: {"Content-Type": "application/json"},
            })
  		    .then(response => response.text())
            .then(data => {
                    alert(data);
                    closeModal();
                    getPasswords();
                });
        }

        function closeModal() {
            if (typeof timeCodeRefresh !== 'undefined') {
                clearInterval(timeCodeRefresh);
            }
            timerMode = false
            passwordInput.type = 'password';
            eyeIcon.classList.remove('fas', 'fa-eye-slash');
            eyeIcon.classList.add('fas', 'fa-eye');
            document.getElementById('modal-password').value = '';
            passid = 0;
            document.getElementById('modal-website').value = '';
            document.getElementById('modal-url').value = '';
            document.getElementById('modal-username').value = '';
            document.getElementById('modal-password').value = '';
            document.getElementById('modal-last-updated').value = '';
            //document.getElementById('modal-pass-btn').style.display = "block";
            document.getElementById('modal-password').type = 'password';
            document.getElementById('modal-copy-btn').style.display = "block";
            quill.setContents(quill.clipboard.convert('<p></p>'));
            document.getElementById('modal-save').classList.add('hidden')
            document.getElementById('modal-add').classList.add('hidden')
            document.getElementById('modal').style.display = 'none';
            document.getElementById('modal-otp').value = ''
        }

        function togglePasswordVisibility(event) {
            event.stopPropagation();
            var passwordInput = document.getElementById('modal-password');
            var eyeIcon = document.getElementById('modal-eye-icon');
            if (passwordInput.type === 'password') {
                passwordInput.type = 'text';
                eyeIcon.classList.remove('fas', 'fa-eye');
                eyeIcon.classList.add('fas', 'fa-eye-slash');
                passwordInput.value = getpass();
                timerMode = true
                timeCodeRefreshInterval = setInterval(fetchTimeBasedCode, 1000);
            } else {
                // Change timeCodeRefresh to timeCodeRefreshInterval
                clearInterval(timeCodeRefreshInterval);
                document.getElementById('modal-otp').value = '';
                passwordInput.type = 'password';
                eyeIcon.classList.remove('fas', 'fa-eye-slash');
                eyeIcon.classList.add('fas', 'fa-eye');
            }
        }

        function getpass() {
            fetch(`/passwords/password?id=${passid}`)
  		    .then(response => response.text())
            .then(data => {                 
                    document.getElementById('modal-password').value = data;
                });
        }

        function copyToClipboard(event) {
            event.stopPropagation();
            var passwordInput = document.getElementById('modal-password');
            passwordInput.select();
            document.execCommand('copy');
        } 

        function clearPassword() {
            setTimeout(() => {
                var passwordInput = document.getElementById('modal-password');
                var eyeIcon = document.getElementById('modal-eye-icon');
                passwordInput.type = 'password';
                eyeIcon.classList.remove('fas', 'fa-eye-slash');
                eyeIcon.classList.add('fas', 'fa-eye');
            }, 5000);
        }

        function openLink(event, url) {
            event.stopPropagation();
            window.open(url, '_blank');
        }

        let getPasswords = () => {
            document.getElementById('password-table').innerHTML = '';
            fetch('/passwords/password-list')
                .then(response => response.json())
                .then(data => {
                    data.forEach(obj => {
                        let row = `
                            <tr class="hover:bg-blue-400" onclick="openModal('${obj.id}')">
                                <td class="py-2 px-4 border">${obj.service}</td>
                                <td class="py-2 px-4 border">${obj.url}</td>
                                <td class="py-2 px-4 border">${obj.username}</td>
                                <td class="py-2 px-4 border">${obj.category}</td>
                                <td class="py-2 px-4 border">${obj.updated}</td>
                            </tr>`;
                        document.getElementById('password-table').innerHTML += row;
                    });
                });
                
            // Fetch new code and remaining time every second
            
        };

        function getCategories() {
            document.getElementById('network-cat').innerHTML = ``
            document.getElementById('network-cat').innerHTML += `<option value="" >Select A Category</option>`
            fetch('/passwords/password-cat/')
  		    .then(response => response.json())
            .then(data => {
                    for(let i = 0; i<data.length; i++) {
                        let obj = data[i]
                        document.getElementById('network-cat').innerHTML += `
                            <option value="${obj.category}">${obj.category}</option>
                        `
                    }
                });
                
        }

        function textChanged() {
            if(passid !== 0) {
                document.getElementById('modal-save').classList.remove('hidden')
            }
        }
       
        async function fetchTimeBasedCode() {
            if(timerMode == true) {
                const response = await fetch(`/passwords/otp?id=${passid}`);
                const data = await response.json();
                console.log(data.code);
                if(data.code == 'none') {
                    clearInterval(timeCodeRefreshInterval);
                    document.getElementById('modal-otp').value = ''
                    timerMode = false
                }else{

                    if (data && data.code) {
                    document.getElementById('modal-otp').value = data.code;

                let timeVal = parseInt(data.remainingTime)
                    if(timeVal >=30 ||timeVal >= 16 ) {
                        document.getElementById('modal-otp').style.color = 'green' 
                    } else if(timeVal >=15 ||timeVal >= 10 ){
                        document.getElementById('modal-otp').style.color = 'orange'
                    } else if(timeVal >=9 ||timeVal >= 1 ){
                        document.getElementById('modal-otp').style.color = 'red'
                    }

                    } else {
                        console.error('Invalid response from server:', data);
                    }
                }
            }
            
        }
        
        
        document.getElementById('modal-website').addEventListener('input', textChanged)
        document.getElementById('modal-username').addEventListener('input', textChanged)
        document.getElementById('modal-url').addEventListener('input', textChanged)
        document.getElementById('modal-last-updated').addEventListener('input', textChanged)
        document.getElementById('network-cat').addEventListener('input', textChanged)
        document.getElementById('modal-password').addEventListener('input', textChanged)
        document.getElementById('editor').addEventListener('input', textChanged)

        document.getElementById('search').addEventListener('input', function(){
            if(document.getElementById('search').length < 1) {
                getPasswords()
            } else {
                document.getElementById('password-table').innerHTML = '';
                fetch(`/passwords/password-list/?search=${document.getElementById('search').value}`,{method : 'put'})
                    .then(response => response.json())
                    .then(data => {
                        data.forEach(obj => {
                            let row = `
                                <tr class="hover:bg-blue-400" onclick="openModal('${obj.id}')">
                                    <td class="py-2 px-4 border">${obj.service}</td>
                                    <td class="py-2 px-4 border">${obj.url}</td>
                                    <td class="py-2 px-4 border">${obj.username}</td>
                                    <td class="py-2 px-4 border">${obj.category}</td>
                                    <td class="py-2 px-4 border">${obj.updated}</td>
                                </tr>`;
                            document.getElementById('password-table').innerHTML += row;
                        });
                    });
            }
        })

        getPasswords();
        getCategories();
    </script>

</body>
</html>
